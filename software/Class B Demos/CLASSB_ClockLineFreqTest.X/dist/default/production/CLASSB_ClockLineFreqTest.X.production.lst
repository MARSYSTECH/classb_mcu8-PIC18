

Microchip Technology PIC18 PRO Macro Assembler V1.31 build 56723 
                                                                                               Mon Aug 04 13:18:41 2014

Microchip Technology Omniscient Code Generator (PRO mode) build 56723
     1                           	processor	18F26K22
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    19                           	psect	text10,global,reloc=2,class=CODE,delta=1
    20                           	psect	text11,global,reloc=2,class=CODE,delta=1
    21                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    22                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    23  0000                     _TMR1	set	4046
    24  0000                     _ANSELA	set	3896
    25  0000                     _ANSELB	set	3897
    26  0000                     _ANSELC	set	3898
    27  0000                     _CCP1CON	set	4029
    28  0000                     _CCPR1H	set	4031
    29  0000                     _CCPR1L	set	4030
    30  0000                     _INTCON	set	4082
    31  0000                     _LATA	set	3977
    32  0000                     _LATB	set	3978
    33  0000                     _LATC	set	3979
    34  0000                     _OSCCON	set	4051
    35  0000                     _PIE1	set	3997
    36  0000                     _PIR1	set	3998
    37  0000                     _T1CON	set	4045
    38  0000                     _T1GCON	set	4044
    39  0000                     _TRISA	set	3986
    40  0000                     _TRISB	set	3987
    41  0000                     _TRISC	set	3988
    42  0000                     _CCP1IE	set	31978
    43  0000                     _CCP1IF	set	31986
    44  0000                     _LATA0	set	31816
    45  0000                     _LATA1	set	31817
    46  0000                     _LATA2	set	31818
    47  0000                     _LATA4	set	31820
    48  0000                     _TMR1IE	set	31976
    49  0000                     _TMR1IF	set	31984
    50  0000                     _TMR1ON	set	32360
    51                           
    52                           	psect	nvCOMRAM
    53  000037                     __pnvCOMRAM:
    54                           	opt stack 0
    55  000037                     _expectedCount:
    56                           	opt stack 0
    57  000037                     	ds	4
    58  00003B                     _toleranceCount:
    59                           	opt stack 0
    60  00003B                     	ds	4
    61  00003F                     _CCPUser:
    62                           	opt stack 0
    63  00003F                     	ds	1
    64  000040                     _CLASSB_Line_Freq:
    65                           	opt stack 0
    66  000040                     	ds	1
    67  000041                     _ClockLineFreqTestFlag:
    68                           	opt stack 0
    69  000041                     	ds	1
    70  000042                     _ClockTestResult:
    71                           	opt stack 0
    72  000042                     	ds	1
    73  000043                     _InterruptsUser:
    74                           	opt stack 0
    75  000043                     	ds	1
    76  000044                     _PIE1User:
    77                           	opt stack 0
    78  000044                     	ds	1
    79  000045                     _PIR1User:
    80                           	opt stack 0
    81  000045                     	ds	1
    82  000046                     _Timer1GateUser:
    83                           	opt stack 0
    84  000046                     	ds	1
    85  000047                     _Timer1User:
    86                           	opt stack 0
    87  000047                     	ds	1
    88                           
    89                           ; #config settings
    90  0000                     
    91                           	psect	cinit
    92  0003AC                     __pcinit:
    93                           	opt stack 0
    94  0003AC                     start_initialization:
    95                           	opt stack 0
    96  0003AC                     __initialization:
    97                           	opt stack 0
    98                           
    99                           ; Clear objects allocated to COMRAM (11 bytes)
   100  0003AC  EE00  F048         	lfsr	0,__pbssCOMRAM
   101  0003B0  0E0B               	movlw	11
   102  0003B2                     clear_0:
   103  0003B2  6AEE               	clrf	postinc0,c
   104  0003B4  06E8               	decf	wreg,f,c
   105  0003B6  E1FD               	bnz	clear_0
   106  0003B8                     end_of_initialization:
   107                           	opt stack 0
   108  0003B8                     __end_of__initialization:
   109                           	opt stack 0
   110  0003B8  0E00               	movlw	low (__Lmediumconst shr (0+16))
   111  0003BA  6EF8               	movwf	tblptru,c
   112  0003BC  0100               	movlb	0
   113  0003BE  EF8A  F001         	goto	_main	;jump to C main() function
   114                           tblptru	equ	0xFF8
   115                           postinc0	equ	0xFEE
   116                           wreg	equ	0xFE8
   117                           
   118                           	psect	bssCOMRAM
   119  000048                     __pbssCOMRAM:
   120                           	opt stack 0
   121  000048                     _testCount:
   122                           	opt stack 0
   123  000048                     	ds	4
   124  00004C                     _ClockLineFreqTestFail:
   125                           	opt stack 0
   126  00004C                     	ds	2
   127  00004E                     _captureTimer1:
   128                           	opt stack 0
   129  00004E                     	ds	2
   130  000050                     _FIRSTCROSS:
   131                           	opt stack 0
   132  000050                     	ds	1
   133  000051                     _TMR1RollOver:
   134                           	opt stack 0
   135  000051                     	ds	1
   136  000052                     _lineTestEnd:
   137                           	opt stack 0
   138  000052                     	ds	1
   139                           tblptru	equ	0xFF8
   140                           postinc0	equ	0xFEE
   141                           wreg	equ	0xFE8
   142                           
   143                           	psect	cstackCOMRAM
   144  000001                     __pcstackCOMRAM:
   145                           	opt stack 0
   146  000001                     ??_CLASSB_ClockLineFreqISR:
   147  000001                     
   148                           ; 1 bytes @ 0x0
   149  000001                     	ds	12
   150  00000D                     ?___lmul:
   151                           	opt stack 0
   152  00000D                     ___lmul@multiplier:
   153                           	opt stack 0
   154                           
   155                           ; 4 bytes @ 0xC
   156  00000D                     	ds	4
   157  000011                     ___lmul@multiplicand:
   158                           	opt stack 0
   159                           
   160                           ; 4 bytes @ 0x10
   161  000011                     	ds	4
   162  000015                     ??___lmul:
   163                           
   164                           ; 0 bytes @ 0x14
   165  000015                     	ds	3
   166  000018                     ___lmul@product:
   167                           	opt stack 0
   168                           
   169                           ; 4 bytes @ 0x17
   170  000018                     	ds	4
   171  00001C                     ?___lldiv:
   172                           	opt stack 0
   173  00001C                     ___lldiv@dividend:
   174                           	opt stack 0
   175                           
   176                           ; 4 bytes @ 0x1B
   177  00001C                     	ds	4
   178  000020                     ___lldiv@divisor:
   179                           	opt stack 0
   180                           
   181                           ; 4 bytes @ 0x1F
   182  000020                     	ds	4
   183  000024                     ___lldiv@quotient:
   184                           	opt stack 0
   185                           
   186                           ; 4 bytes @ 0x23
   187  000024                     	ds	4
   188  000028                     ___lldiv@counter:
   189                           	opt stack 0
   190                           
   191                           ; 1 bytes @ 0x27
   192  000028                     	ds	1
   193  000029                     CLASSB_ClockLineFreqTest@clockFrequency:
   194                           	opt stack 0
   195                           
   196                           ; 4 bytes @ 0x28
   197  000029                     	ds	4
   198  00002D                     CLASSB_ClockLineFreqTest@lineFrequency:
   199                           	opt stack 0
   200                           
   201                           ; 1 bytes @ 0x2C
   202  00002D                     	ds	1
   203  00002E                     CLASSB_ClockLineFreqTest@tolerance:
   204                           	opt stack 0
   205                           
   206                           ; 1 bytes @ 0x2D
   207  00002E                     	ds	1
   208  00002F                     ??_CLASSB_ClockLineFreqTest:
   209                           
   210                           ; 0 bytes @ 0x2E
   211  00002F                     	ds	4
   212  000033                     CLASSB_ClockLineFreqTest@systemFrequency:
   213                           	opt stack 0
   214                           
   215                           ; 4 bytes @ 0x32
   216  000033                     	ds	4
   217  000037                     tblptru	equ	0xFF8
   218                           postinc0	equ	0xFEE
   219                           wreg	equ	0xFE8
   220                           
   221                           ; 0 bytes @ 0x36
   222 ;;
   223 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   224 ;;
   225 ;; *************** function _main *****************
   226 ;; Defined at:
   227 ;;		line 163 in file "main.c"
   228 ;; Parameters:    Size  Location     Type
   229 ;;		None
   230 ;; Auto vars:     Size  Location     Type
   231 ;;  clockFrequen    4    0        unsigned long 
   232 ;;  tolerance       1    0        unsigned char 
   233 ;;  lineFrequenc    1    0        unsigned char 
   234 ;; Return value:  Size  Location     Type
   235 ;;		None               void
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   238 ;; Tracked objects:
   239 ;;		On entry : 0/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   243 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   244 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   245 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   246 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   247 ;;Total ram usage:        6 bytes
   248 ;; Hardware stack levels required when called:    5
   249 ;; This function calls:
   250 ;;		_CLASSB_ClockLineFreqTest
   251 ;;		_CheckClockLineTestFlag
   252 ;;		_Init
   253 ;;		_OnClockError
   254 ;; This function is called by:
   255 ;;		Startup code after reset
   256 ;; This function uses a non-reentrant model
   257 ;;
   258                           
   259                           	psect	text0
   260  000314                     __ptext0:
   261                           	opt stack 0
   262  000314                     _main:
   263                           	opt stack 26
   264                           
   265                           ;main.c: 165: Init();
   266                           
   267                           ;incstack = 0
   268  000314  ECA0  F001         	call	_Init	;wreg free
   269                           
   270                           ; BSR set to: 15
   271                           ;main.c: 178: CLASSB_ClockLineFreqTest(clockFrequency, lineFrequency, tolerance);
   272                           
   273                           ; BSR set to: 15
   274                           
   275                           ; BSR set to: 15
   276                           
   277                           ; BSR set to: 15
   278  000318  6A29               	clrf	CLASSB_ClockLineFreqTest@clockFrequency,c
   279  00031A  0E24               	movlw	36
   280  00031C  6E2A               	movwf	CLASSB_ClockLineFreqTest@clockFrequency+1,c
   281  00031E  0EF4               	movlw	244
   282  000320  6E2B               	movwf	CLASSB_ClockLineFreqTest@clockFrequency+2,c
   283  000322  6A2C               	clrf	CLASSB_ClockLineFreqTest@clockFrequency+3,c
   284  000324  0E3C               	movlw	60
   285  000326  6E2D               	movwf	CLASSB_ClockLineFreqTest@lineFrequency,c
   286  000328  0E05               	movlw	5
   287  00032A  6E2E               	movwf	CLASSB_ClockLineFreqTest@tolerance,c
   288  00032C  ECA2  F000         	call	_CLASSB_ClockLineFreqTest	;wreg free
   289  000330                     l963:
   290                           
   291                           ;main.c: 182: {
   292                           ;main.c: 183: ClockTestResult = CheckClockLineTestFlag();
   293  000330  ECE1  F001         	call	_CheckClockLineTestFlag	;wreg free
   294  000334  6E42               	movwf	_ClockTestResult,c
   295                           
   296                           ;main.c: 184: if (ClockTestResult == CLASSB_TEST_FAIL)
   297  000336  0442               	decf	_ClockTestResult,w,c
   298  000338  E1FB               	bnz	l963
   299                           
   300                           ;main.c: 185: {
   301                           ;main.c: 186: OnClockError();
   302  00033A  ECEB  F001         	call	_OnClockError	;wreg free
   303  00033E  D7F8               	goto	l963
   304  000340                     __end_of_main:
   305                           	opt stack 0
   306                           tblptru	equ	0xFF8
   307                           postinc0	equ	0xFEE
   308                           wreg	equ	0xFE8
   309                           
   310 ;; *************** function _OnClockError *****************
   311 ;; Defined at:
   312 ;;		line 211 in file "main.c"
   313 ;; Parameters:    Size  Location     Type
   314 ;;		None
   315 ;; Auto vars:     Size  Location     Type
   316 ;;		None
   317 ;; Return value:  Size  Location     Type
   318 ;;		None               void
   319 ;; Registers used:
   320 ;;		None
   321 ;; Tracked objects:
   322 ;;		On entry : 0/F
   323 ;;		On exit  : 0/0
   324 ;;		Unchanged: 0/0
   325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   326 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   329 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   330 ;;Total ram usage:        0 bytes
   331 ;; Hardware stack levels used:    1
   332 ;; Hardware stack levels required when called:    3
   333 ;; This function calls:
   334 ;;		Nothing
   335 ;; This function is called by:
   336 ;;		_main
   337 ;; This function uses a non-reentrant model
   338 ;;
   339                           
   340                           	psect	text1
   341  0003D6                     __ptext1:
   342                           	opt stack 0
   343  0003D6                     _OnClockError:
   344                           	opt stack 27
   345                           
   346                           ;main.c: 214: __nop();
   347                           
   348                           ;incstack = 0
   349  0003D6  F000               	nop	
   350  0003D8  0012               	return	
   351  0003DA                     __end_of_OnClockError:
   352                           	opt stack 0
   353                           tblptru	equ	0xFF8
   354                           postinc0	equ	0xFEE
   355                           wreg	equ	0xFE8
   356                           
   357 ;; *************** function _Init *****************
   358 ;; Defined at:
   359 ;;		line 146 in file "main.c"
   360 ;; Parameters:    Size  Location     Type
   361 ;;		None
   362 ;; Auto vars:     Size  Location     Type
   363 ;;		None
   364 ;; Return value:  Size  Location     Type
   365 ;;		None               void
   366 ;; Registers used:
   367 ;;		wreg, status,2
   368 ;; Tracked objects:
   369 ;;		On entry : 0/0
   370 ;;		On exit  : F/F
   371 ;;		Unchanged: 0/0
   372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   377 ;;Total ram usage:        0 bytes
   378 ;; Hardware stack levels used:    1
   379 ;; Hardware stack levels required when called:    3
   380 ;; This function calls:
   381 ;;		Nothing
   382 ;; This function is called by:
   383 ;;		_main
   384 ;; This function uses a non-reentrant model
   385 ;;
   386                           
   387                           	psect	text2
   388  000340                     __ptext2:
   389                           	opt stack 0
   390  000340                     _Init:
   391                           	opt stack 27
   392                           
   393                           ;main.c: 148: OSCCON = 0b01110000;
   394                           
   395                           ;incstack = 0
   396  000340  0E70               	movlw	112
   397  000342  6ED3               	movwf	4051,c	;volatile
   398                           
   399                           ;main.c: 149: TRISA = 0;
   400  000344  6A92               	clrf	3986,c	;volatile
   401                           
   402                           ;main.c: 150: TRISB = 0;
   403  000346  6A93               	clrf	3987,c	;volatile
   404                           
   405                           ;main.c: 151: TRISC = 0b00000100;
   406  000348  0E04               	movlw	4
   407  00034A  6E94               	movwf	3988,c	;volatile
   408                           
   409                           ;main.c: 153: ANSELA = 0;
   410  00034C  010F               	movlb	15	; () banked
   411  00034E  6B38               	clrf	56,b	;volatile
   412                           
   413                           ; BSR set to: 15
   414                           ;main.c: 154: ANSELB = 0;
   415  000350  6B39               	clrf	57,b	;volatile
   416                           
   417                           ; BSR set to: 15
   418                           ;main.c: 155: ANSELC = 0;
   419  000352  6B3A               	clrf	58,b	;volatile
   420                           
   421                           ; BSR set to: 15
   422                           ;main.c: 157: LATA = 0;
   423  000354  6A89               	clrf	3977,c	;volatile
   424                           
   425                           ; BSR set to: 15
   426                           ;main.c: 158: LATB = 0;
   427  000356  6A8A               	clrf	3978,c	;volatile
   428                           
   429                           ; BSR set to: 15
   430                           ;main.c: 159: LATC = 0;
   431  000358  6A8B               	clrf	3979,c	;volatile
   432                           
   433                           ; BSR set to: 15
   434  00035A  0012               	return	
   435  00035C                     __end_of_Init:
   436                           	opt stack 0
   437                           tblptru	equ	0xFF8
   438                           postinc0	equ	0xFEE
   439                           wreg	equ	0xFE8
   440                           
   441 ;; *************** function _CheckClockLineTestFlag *****************
   442 ;; Defined at:
   443 ;;		line 192 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;		None
   448 ;; Return value:  Size  Location     Type
   449 ;;                  1    wreg      enum E41
   450 ;; Registers used:
   451 ;;		wreg, status,2, status,0
   452 ;; Tracked objects:
   453 ;;		On entry : 0/F
   454 ;;		On exit  : 0/0
   455 ;;		Unchanged: 0/0
   456 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   457 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   458 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   459 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   460 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   461 ;;Total ram usage:        0 bytes
   462 ;; Hardware stack levels used:    1
   463 ;; Hardware stack levels required when called:    3
   464 ;; This function calls:
   465 ;;		Nothing
   466 ;; This function is called by:
   467 ;;		_main
   468 ;; This function uses a non-reentrant model
   469 ;;
   470                           
   471                           	psect	text3
   472  0003C2                     __ptext3:
   473                           	opt stack 0
   474  0003C2                     _CheckClockLineTestFlag:
   475                           	opt stack 27
   476                           
   477                           ;main.c: 194: if (ClockLineFreqTestFlag == CLASSB_TEST_FAIL)
   478                           
   479                           ; BSR set to: 15
   480                           ;incstack = 0
   481  0003C2  0441               	decf	_ClockLineFreqTestFlag,w,c
   482  0003C4  E102               	bnz	l161
   483                           
   484                           ;main.c: 195: {
   485                           ;main.c: 196: LATA0 = 1;
   486  0003C6  8089               	bsf	3977,0,c	;volatile
   487                           
   488                           ;main.c: 197: return CLASSB_TEST_FAIL;
   489  0003C8  0C01               	retlw	1
   490  0003CA                     l161:
   491                           
   492                           ;main.c: 198: }
   493                           ;main.c: 199: if (ClockLineFreqTestFlag == CLASSB_TEST_PASS)
   494  0003CA  6641               	tstfsz	_ClockLineFreqTestFlag,c
   495  0003CC  D002               	goto	l163
   496                           
   497                           ;main.c: 200: {
   498                           ;main.c: 201: LATA1 = 1;
   499  0003CE  8289               	bsf	3977,1,c	;volatile
   500                           
   501                           ;main.c: 202: return CLASSB_TEST_PASS;
   502  0003D0  0C00               	retlw	0
   503  0003D2                     l163:
   504                           
   505                           ;main.c: 204: else
   506                           ;main.c: 205: {
   507                           ;main.c: 206: LATA2 ^= 1;
   508  0003D2  7489               	btg	3977,2,c	;volatile
   509                           
   510                           ;main.c: 207: return CLASSB_TEST_INPROGRESS;
   511  0003D4  0C03               	retlw	3
   512  0003D6                     __end_of_CheckClockLineTestFlag:
   513                           	opt stack 0
   514                           tblptru	equ	0xFF8
   515                           postinc0	equ	0xFEE
   516                           wreg	equ	0xFE8
   517                           
   518 ;; *************** function _CLASSB_ClockLineFreqTest *****************
   519 ;; Defined at:
   520 ;;		line 78 in file "CLASSB_ClockLineFreqTest.c"
   521 ;; Parameters:    Size  Location     Type
   522 ;;  clockFrequen    4   40[COMRAM] unsigned long 
   523 ;;  lineFrequenc    1   44[COMRAM] unsigned char 
   524 ;;  tolerance       1   45[COMRAM] unsigned char 
   525 ;; Auto vars:     Size  Location     Type
   526 ;;  systemFreque    4   50[COMRAM] unsigned long 
   527 ;; Return value:  Size  Location     Type
   528 ;;		None               void
   529 ;; Registers used:
   530 ;;		wreg, status,2, status,0, prodl, prodh, cstack
   531 ;; Tracked objects:
   532 ;;		On entry : F/F
   533 ;;		On exit  : 0/0
   534 ;;		Unchanged: 0/0
   535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   536 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   537 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   538 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   539 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   540 ;;Total ram usage:       14 bytes
   541 ;; Hardware stack levels used:    1
   542 ;; Hardware stack levels required when called:    4
   543 ;; This function calls:
   544 ;;		_CLASSB_LineUserSave
   545 ;;		_LineFreqInit
   546 ;;		___lldiv
   547 ;;		___lmul
   548 ;; This function is called by:
   549 ;;		_main
   550 ;; This function uses a non-reentrant model
   551 ;;
   552                           
   553                           	psect	text4
   554  000144                     __ptext4:
   555                           	opt stack 0
   556  000144                     _CLASSB_ClockLineFreqTest:
   557                           	opt stack 26
   558                           
   559                           ; BSR set to: 15
   560                           ;CLASSB_ClockLineFreqTest.c: 80: uint32_t systemFrequency = clockFrequency/4;
   561                           
   562                           ;incstack = 0
   563  000144  C029  F02F         	movff	CLASSB_ClockLineFreqTest@clockFrequency,??_CLASSB_ClockLineFreqTest
   564  000148  C02A  F030         	movff	CLASSB_ClockLineFreqTest@clockFrequency+1,??_CLASSB_ClockLineFreqTest+1
   565  00014C  C02B  F031         	movff	CLASSB_ClockLineFreqTest@clockFrequency+2,??_CLASSB_ClockLineFreqTest+2
   566  000150  C02C  F032         	movff	CLASSB_ClockLineFreqTest@clockFrequency+3,??_CLASSB_ClockLineFreqTest+3
   567  000154  0E03               	movlw	3
   568  000156  D005               	goto	u40
   569  000158                     u45:
   570  000158  90D8               	bcf	status,0,c
   571  00015A  3232               	rrcf	??_CLASSB_ClockLineFreqTest+3,f,c
   572  00015C  3231               	rrcf	??_CLASSB_ClockLineFreqTest+2,f,c
   573  00015E  3230               	rrcf	??_CLASSB_ClockLineFreqTest+1,f,c
   574  000160  322F               	rrcf	??_CLASSB_ClockLineFreqTest,f,c
   575  000162                     u40:
   576  000162  2EE8               	decfsz	wreg,f,c
   577  000164  D7F9               	goto	u45
   578  000166  C02F  F033         	movff	??_CLASSB_ClockLineFreqTest,CLASSB_ClockLineFreqTest@systemFrequency
   579  00016A  C030  F034         	movff	??_CLASSB_ClockLineFreqTest+1,CLASSB_ClockLineFreqTest@systemFrequency+1
   580  00016E  C031  F035         	movff	??_CLASSB_ClockLineFreqTest+2,CLASSB_ClockLineFreqTest@systemFrequency+2
   581  000172  C032  F036         	movff	??_CLASSB_ClockLineFreqTest+3,CLASSB_ClockLineFreqTest@systemFrequency+3
   582                           
   583                           ; BSR set to: 15
   584                           ;CLASSB_ClockLineFreqTest.c: 83: CLASSB_Line_Freq = lineFrequency;
   585  000176  C02D  F040         	movff	CLASSB_ClockLineFreqTest@lineFrequency,_CLASSB_Line_Freq
   586                           
   587                           ; BSR set to: 15
   588                           ;CLASSB_ClockLineFreqTest.c: 86: CLASSB_LineUserSave();
   589  00017A  ECBC  F001         	call	_CLASSB_LineUserSave	;wreg free
   590                           
   591                           ; BSR set to: 15
   592                           ;CLASSB_ClockLineFreqTest.c: 88: ClockLineFreqTestFlag = CLASSB_TEST_INPROGRESS;
   593  00017E  0E03               	movlw	3
   594  000180  6E41               	movwf	_ClockLineFreqTestFlag,c
   595                           
   596                           ; BSR set to: 15
   597                           ;CLASSB_ClockLineFreqTest.c: 91: LineFreqInit();
   598  000182  ECAE  F001         	call	_LineFreqInit	;wreg free
   599                           
   600                           ; BSR set to: 15
   601                           ;CLASSB_ClockLineFreqTest.c: 95: expectedCount = systemFrequency/CLASSB_Line_Freq;
   602  000186  C033  F01C         	movff	CLASSB_ClockLineFreqTest@systemFrequency,___lldiv@dividend
   603  00018A  C034  F01D         	movff	CLASSB_ClockLineFreqTest@systemFrequency+1,___lldiv@dividend+1
   604  00018E  C035  F01E         	movff	CLASSB_ClockLineFreqTest@systemFrequency+2,___lldiv@dividend+2
   605  000192  C036  F01F         	movff	CLASSB_ClockLineFreqTest@systemFrequency+3,___lldiv@dividend+3
   606  000196  5040               	movf	_CLASSB_Line_Freq,w,c
   607  000198  6E20               	movwf	___lldiv@divisor,c
   608  00019A  6A21               	clrf	___lldiv@divisor+1,c
   609  00019C  6A22               	clrf	___lldiv@divisor+2,c
   610  00019E  6A23               	clrf	___lldiv@divisor+3,c
   611  0001A0  EC4F  F001         	call	___lldiv	;wreg free
   612  0001A4  C01C  F037         	movff	?___lldiv,_expectedCount
   613  0001A8  C01D  F038         	movff	?___lldiv+1,_expectedCount+1
   614  0001AC  C01E  F039         	movff	?___lldiv+2,_expectedCount+2
   615  0001B0  C01F  F03A         	movff	?___lldiv+3,_expectedCount+3
   616                           
   617                           ;CLASSB_ClockLineFreqTest.c: 96: toleranceCount = ((uint32_t)tolerance * expectedCount)/
      +                          100;
   618  0001B4  C037  F011         	movff	_expectedCount,___lmul@multiplicand
   619  0001B8  C038  F012         	movff	_expectedCount+1,___lmul@multiplicand+1
   620  0001BC  C039  F013         	movff	_expectedCount+2,___lmul@multiplicand+2
   621  0001C0  C03A  F014         	movff	_expectedCount+3,___lmul@multiplicand+3
   622  0001C4  502E               	movf	CLASSB_ClockLineFreqTest@tolerance,w,c
   623  0001C6  6E0D               	movwf	___lmul@multiplier,c
   624  0001C8  6A0E               	clrf	___lmul@multiplier+1,c
   625  0001CA  6A0F               	clrf	___lmul@multiplier+2,c
   626  0001CC  6A10               	clrf	___lmul@multiplier+3,c
   627  0001CE  EC02  F001         	call	___lmul	;wreg free
   628  0001D2  C00D  F01C         	movff	?___lmul,___lldiv@dividend
   629  0001D6  C00E  F01D         	movff	?___lmul+1,___lldiv@dividend+1
   630  0001DA  C00F  F01E         	movff	?___lmul+2,___lldiv@dividend+2
   631  0001DE  C010  F01F         	movff	?___lmul+3,___lldiv@dividend+3
   632  0001E2  0E64               	movlw	100
   633  0001E4  6E20               	movwf	___lldiv@divisor,c
   634  0001E6  0E00               	movlw	0
   635  0001E8  6A21               	clrf	___lldiv@divisor+1,c
   636  0001EA  6A22               	clrf	___lldiv@divisor+2,c
   637  0001EC  6A23               	clrf	___lldiv@divisor+3,c
   638  0001EE  EC4F  F001         	call	___lldiv	;wreg free
   639  0001F2  C01C  F03B         	movff	?___lldiv,_toleranceCount
   640  0001F6  C01D  F03C         	movff	?___lldiv+1,_toleranceCount+1
   641  0001FA  C01E  F03D         	movff	?___lldiv+2,_toleranceCount+2
   642  0001FE  C01F  F03E         	movff	?___lldiv+3,_toleranceCount+3
   643  000202  0012               	return	
   644  000204                     __end_of_CLASSB_ClockLineFreqTest:
   645                           	opt stack 0
   646                           tblptru	equ	0xFF8
   647                           postinc0	equ	0xFEE
   648                           wreg	equ	0xFE8
   649                           status	equ	0xFD8
   650                           
   651 ;; *************** function ___lmul *****************
   652 ;; Defined at:
   653 ;;		line 9 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\lmul.c"
   654 ;; Parameters:    Size  Location     Type
   655 ;;  multiplier      4   12[COMRAM] unsigned long 
   656 ;;  multiplicand    4   16[COMRAM] unsigned long 
   657 ;; Auto vars:     Size  Location     Type
   658 ;;  product         4   23[COMRAM] unsigned long 
   659 ;; Return value:  Size  Location     Type
   660 ;;                  4   12[COMRAM] unsigned long 
   661 ;; Registers used:
   662 ;;		wreg, status,2, status,0, prodl, prodh
   663 ;; Tracked objects:
   664 ;;		On entry : 0/F
   665 ;;		On exit  : 0/0
   666 ;;		Unchanged: 0/0
   667 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   668 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   669 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   670 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   671 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   672 ;;Total ram usage:       15 bytes
   673 ;; Hardware stack levels used:    1
   674 ;; Hardware stack levels required when called:    3
   675 ;; This function calls:
   676 ;;		Nothing
   677 ;; This function is called by:
   678 ;;		_CLASSB_ClockLineFreqTest
   679 ;; This function uses a non-reentrant model
   680 ;;
   681                           
   682                           	psect	text5
   683  000204                     __ptext5:
   684                           	opt stack 0
   685  000204                     ___lmul:
   686                           	opt stack 26
   687                           
   688                           ;incstack = 0
   689  000204  500D               	movf	___lmul@multiplier,w,c
   690  000206  0211               	mulwf	___lmul@multiplicand,c
   691  000208  CFF3 F018          	movff	prodl,___lmul@product
   692  00020C  CFF4 F019          	movff	prodh,___lmul@product+1
   693  000210  6A1A               	clrf	___lmul@product+2,c
   694  000212  6A1B               	clrf	___lmul@product+3,c
   695  000214  500D               	movf	___lmul@multiplier,w,c
   696  000216  0212               	mulwf	___lmul@multiplicand+1,c
   697  000218  CFF3 F015          	movff	prodl,??___lmul
   698  00021C  CFF4 F016          	movff	prodh,??___lmul+1
   699  000220  6A17               	clrf	(??___lmul+2)& (0+255),c
   700  000222  5015               	movf	??___lmul,w,c
   701  000224  2619               	addwf	___lmul@product+1,f,c
   702  000226  5016               	movf	??___lmul+1,w,c
   703  000228  221A               	addwfc	___lmul@product+2,f,c
   704  00022A  5017               	movf	??___lmul+2,w,c
   705  00022C  221B               	addwfc	___lmul@product+3,f,c
   706  00022E  500E               	movf	___lmul@multiplier+1,w,c
   707  000230  0211               	mulwf	___lmul@multiplicand,c
   708  000232  CFF3 F015          	movff	prodl,??___lmul
   709  000236  CFF4 F016          	movff	prodh,??___lmul+1
   710  00023A  6A17               	clrf	(??___lmul+2)& (0+255),c
   711  00023C  5015               	movf	??___lmul,w,c
   712  00023E  2619               	addwf	___lmul@product+1,f,c
   713  000240  5016               	movf	??___lmul+1,w,c
   714  000242  221A               	addwfc	___lmul@product+2,f,c
   715  000244  5017               	movf	??___lmul+2,w,c
   716  000246  221B               	addwfc	___lmul@product+3,f,c
   717  000248  500D               	movf	___lmul@multiplier,w,c
   718  00024A  0213               	mulwf	___lmul@multiplicand+2,c
   719  00024C  50F3               	movf	prodl,w,c
   720  00024E  261A               	addwf	___lmul@product+2,f,c
   721  000250  50F4               	movf	prodh,w,c
   722  000252  221B               	addwfc	___lmul@product+3,f,c
   723  000254  500E               	movf	___lmul@multiplier+1,w,c
   724  000256  0212               	mulwf	___lmul@multiplicand+1,c
   725  000258  50F3               	movf	prodl,w,c
   726  00025A  261A               	addwf	___lmul@product+2,f,c
   727  00025C  50F4               	movf	prodh,w,c
   728  00025E  221B               	addwfc	___lmul@product+3,f,c
   729  000260  500F               	movf	___lmul@multiplier+2,w,c
   730  000262  0211               	mulwf	___lmul@multiplicand,c
   731  000264  50F3               	movf	prodl,w,c
   732  000266  261A               	addwf	___lmul@product+2,f,c
   733  000268  50F4               	movf	prodh,w,c
   734  00026A  221B               	addwfc	___lmul@product+3,f,c
   735  00026C  5014               	movf	___lmul@multiplicand+3,w,c
   736  00026E  020D               	mulwf	___lmul@multiplier,c
   737  000270  50F3               	movf	prodl,w,c
   738  000272  261B               	addwf	___lmul@product+3,f,c
   739  000274  500E               	movf	___lmul@multiplier+1,w,c
   740  000276  0213               	mulwf	___lmul@multiplicand+2,c
   741  000278  50F3               	movf	prodl,w,c
   742  00027A  261B               	addwf	___lmul@product+3,f,c
   743  00027C  500F               	movf	___lmul@multiplier+2,w,c
   744  00027E  0212               	mulwf	___lmul@multiplicand+1,c
   745  000280  50F3               	movf	prodl,w,c
   746  000282  261B               	addwf	___lmul@product+3,f,c
   747  000284  5010               	movf	___lmul@multiplier+3,w,c
   748  000286  0211               	mulwf	___lmul@multiplicand,c
   749  000288  50F3               	movf	prodl,w,c
   750  00028A  261B               	addwf	___lmul@product+3,f,c
   751  00028C  C018  F00D         	movff	___lmul@product,?___lmul
   752  000290  C019  F00E         	movff	___lmul@product+1,?___lmul+1
   753  000294  C01A  F00F         	movff	___lmul@product+2,?___lmul+2
   754  000298  C01B  F010         	movff	___lmul@product+3,?___lmul+3
   755  00029C  0012               	return	
   756  00029E                     __end_of___lmul:
   757                           	opt stack 0
   758                           tblptru	equ	0xFF8
   759                           prodh	equ	0xFF4
   760                           prodl	equ	0xFF3
   761                           postinc0	equ	0xFEE
   762                           wreg	equ	0xFE8
   763                           status	equ	0xFD8
   764                           
   765 ;; *************** function ___lldiv *****************
   766 ;; Defined at:
   767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.31\sources\common\lldiv.c"
   768 ;; Parameters:    Size  Location     Type
   769 ;;  dividend        4   27[COMRAM] unsigned long 
   770 ;;  divisor         4   31[COMRAM] unsigned long 
   771 ;; Auto vars:     Size  Location     Type
   772 ;;  quotient        4   35[COMRAM] unsigned long 
   773 ;;  counter         1   39[COMRAM] unsigned char 
   774 ;; Return value:  Size  Location     Type
   775 ;;                  4   27[COMRAM] unsigned long 
   776 ;; Registers used:
   777 ;;		wreg, status,2, status,0
   778 ;; Tracked objects:
   779 ;;		On entry : 0/F
   780 ;;		On exit  : 0/0
   781 ;;		Unchanged: 0/0
   782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   783 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   784 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   786 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   787 ;;Total ram usage:       13 bytes
   788 ;; Hardware stack levels used:    1
   789 ;; Hardware stack levels required when called:    3
   790 ;; This function calls:
   791 ;;		Nothing
   792 ;; This function is called by:
   793 ;;		_CLASSB_ClockLineFreqTest
   794 ;; This function uses a non-reentrant model
   795 ;;
   796                           
   797                           	psect	text6
   798  00029E                     __ptext6:
   799                           	opt stack 0
   800  00029E                     ___lldiv:
   801                           	opt stack 26
   802                           
   803                           ;incstack = 0
   804  00029E  6A24               	clrf	___lldiv@quotient,c
   805  0002A0  6A25               	clrf	___lldiv@quotient+1,c
   806  0002A2  6A26               	clrf	___lldiv@quotient+2,c
   807  0002A4  6A27               	clrf	___lldiv@quotient+3,c
   808  0002A6  5023               	movf	___lldiv@divisor+3,w,c
   809  0002A8  1020               	iorwf	___lldiv@divisor,w,c
   810  0002AA  1021               	iorwf	___lldiv@divisor+1,w,c
   811  0002AC  1022               	iorwf	___lldiv@divisor+2,w,c
   812  0002AE  E029               	bz	l608
   813  0002B0  0E01               	movlw	1
   814  0002B2  6E28               	movwf	___lldiv@counter,c
   815  0002B4  D006               	goto	l825
   816  0002B6                     l823:
   817  0002B6  90D8               	bcf	status,0,c
   818  0002B8  3620               	rlcf	___lldiv@divisor,f,c
   819  0002BA  3621               	rlcf	___lldiv@divisor+1,f,c
   820  0002BC  3622               	rlcf	___lldiv@divisor+2,f,c
   821  0002BE  3623               	rlcf	___lldiv@divisor+3,f,c
   822  0002C0  2A28               	incf	___lldiv@counter,f,c
   823  0002C2                     l825:
   824  0002C2  AE23               	btfss	___lldiv@divisor+3,7,c
   825  0002C4  D7F8               	goto	l823
   826  0002C6                     l827:
   827  0002C6  90D8               	bcf	status,0,c
   828  0002C8  3624               	rlcf	___lldiv@quotient,f,c
   829  0002CA  3625               	rlcf	___lldiv@quotient+1,f,c
   830  0002CC  3626               	rlcf	___lldiv@quotient+2,f,c
   831  0002CE  3627               	rlcf	___lldiv@quotient+3,f,c
   832  0002D0  5020               	movf	___lldiv@divisor,w,c
   833  0002D2  5C1C               	subwf	___lldiv@dividend,w,c
   834  0002D4  5021               	movf	___lldiv@divisor+1,w,c
   835  0002D6  581D               	subwfb	___lldiv@dividend+1,w,c
   836  0002D8  5022               	movf	___lldiv@divisor+2,w,c
   837  0002DA  581E               	subwfb	___lldiv@dividend+2,w,c
   838  0002DC  5023               	movf	___lldiv@divisor+3,w,c
   839  0002DE  581F               	subwfb	___lldiv@dividend+3,w,c
   840  0002E0  E309               	bnc	l835
   841  0002E2  5020               	movf	___lldiv@divisor,w,c
   842  0002E4  5E1C               	subwf	___lldiv@dividend,f,c
   843  0002E6  5021               	movf	___lldiv@divisor+1,w,c
   844  0002E8  5A1D               	subwfb	___lldiv@dividend+1,f,c
   845  0002EA  5022               	movf	___lldiv@divisor+2,w,c
   846  0002EC  5A1E               	subwfb	___lldiv@dividend+2,f,c
   847  0002EE  5023               	movf	___lldiv@divisor+3,w,c
   848  0002F0  5A1F               	subwfb	___lldiv@dividend+3,f,c
   849  0002F2  8024               	bsf	___lldiv@quotient,0,c
   850  0002F4                     l835:
   851  0002F4  90D8               	bcf	status,0,c
   852  0002F6  3223               	rrcf	___lldiv@divisor+3,f,c
   853  0002F8  3222               	rrcf	___lldiv@divisor+2,f,c
   854  0002FA  3221               	rrcf	___lldiv@divisor+1,f,c
   855  0002FC  3220               	rrcf	___lldiv@divisor,f,c
   856  0002FE  2E28               	decfsz	___lldiv@counter,f,c
   857  000300  D7E2               	goto	l827
   858  000302                     l608:
   859  000302  C024  F01C         	movff	___lldiv@quotient,?___lldiv
   860  000306  C025  F01D         	movff	___lldiv@quotient+1,?___lldiv+1
   861  00030A  C026  F01E         	movff	___lldiv@quotient+2,?___lldiv+2
   862  00030E  C027  F01F         	movff	___lldiv@quotient+3,?___lldiv+3
   863  000312  0012               	return	
   864  000314                     __end_of___lldiv:
   865                           	opt stack 0
   866                           tblptru	equ	0xFF8
   867                           prodh	equ	0xFF4
   868                           prodl	equ	0xFF3
   869                           postinc0	equ	0xFEE
   870                           wreg	equ	0xFE8
   871                           status	equ	0xFD8
   872                           
   873 ;; *************** function _LineFreqInit *****************
   874 ;; Defined at:
   875 ;;		line 171 in file "CLASSB_ClockLineFreqTest.c"
   876 ;; Parameters:    Size  Location     Type
   877 ;;		None
   878 ;; Auto vars:     Size  Location     Type
   879 ;;		None
   880 ;; Return value:  Size  Location     Type
   881 ;;		None               void
   882 ;; Registers used:
   883 ;;		wreg, status,2
   884 ;; Tracked objects:
   885 ;;		On entry : F/F
   886 ;;		On exit  : F/F
   887 ;;		Unchanged: E/0
   888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   890 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   892 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   893 ;;Total ram usage:        0 bytes
   894 ;; Hardware stack levels used:    1
   895 ;; Hardware stack levels required when called:    3
   896 ;; This function calls:
   897 ;;		Nothing
   898 ;; This function is called by:
   899 ;;		_CLASSB_ClockLineFreqTest
   900 ;; This function uses a non-reentrant model
   901 ;;
   902                           
   903                           	psect	text7
   904  00035C                     __ptext7:
   905                           	opt stack 0
   906  00035C                     _LineFreqInit:
   907                           	opt stack 26
   908                           
   909                           ; BSR set to: 15
   910                           ;CLASSB_ClockLineFreqTest.c: 173: T1CON = 0b00000000;
   911                           
   912                           ;incstack = 0
   913  00035C  6ACD               	clrf	4045,c	;volatile
   914                           
   915                           ;CLASSB_ClockLineFreqTest.c: 175: T1GCON = 0;
   916  00035E  6ACC               	clrf	4044,c	;volatile
   917                           
   918                           ;CLASSB_ClockLineFreqTest.c: 176: TMR1 = 0;
   919  000360  6ACE               	clrf	4046,c	;volatile
   920  000362  6ACF               	clrf	4047,c	;volatile
   921                           
   922                           ;CLASSB_ClockLineFreqTest.c: 177: TMR1IF = 0;
   923  000364  909E               	bcf	3998,0,c	;volatile
   924                           
   925                           ;CLASSB_ClockLineFreqTest.c: 178: TMR1IE = 1;
   926  000366  809D               	bsf	3997,0,c	;volatile
   927                           
   928                           ; BSR set to: 15
   929                           ;CLASSB_ClockLineFreqTest.c: 180: CCP1CON = 0b00000100;
   930  000368  0E04               	movlw	4
   931  00036A  6EBD               	movwf	4029,c	;volatile
   932                           
   933                           ; BSR set to: 15
   934                           ;CLASSB_ClockLineFreqTest.c: 182: CCP1IF = 0;
   935  00036C  949E               	bcf	3998,2,c	;volatile
   936                           
   937                           ; BSR set to: 15
   938                           ;CLASSB_ClockLineFreqTest.c: 183: CCP1IE = 1;
   939  00036E  849D               	bsf	3997,2,c	;volatile
   940                           
   941                           ;CLASSB_ClockLineFreqTest.c: 185: INTCON = 0xC0;
   942  000370  0EC0               	movlw	192
   943  000372  6EF2               	movwf	intcon,c	;volatile
   944                           
   945                           ; BSR set to: 15
   946                           ;CLASSB_ClockLineFreqTest.c: 187: TMR1ON = 1;
   947  000374  80CD               	bsf	4045,0,c	;volatile
   948                           
   949                           ; BSR set to: 15
   950  000376  0CC0               	retlw	192
   951  000378                     __end_of_LineFreqInit:
   952                           	opt stack 0
   953                           tblptru	equ	0xFF8
   954                           prodh	equ	0xFF4
   955                           prodl	equ	0xFF3
   956                           intcon	equ	0xFF2
   957                           postinc0	equ	0xFEE
   958                           wreg	equ	0xFE8
   959                           status	equ	0xFD8
   960                           
   961 ;; *************** function _CLASSB_LineUserSave *****************
   962 ;; Defined at:
   963 ;;		line 190 in file "CLASSB_ClockLineFreqTest.c"
   964 ;; Parameters:    Size  Location     Type
   965 ;;		None
   966 ;; Auto vars:     Size  Location     Type
   967 ;;		None
   968 ;; Return value:  Size  Location     Type
   969 ;;		None               void
   970 ;; Registers used:
   971 ;;		None
   972 ;; Tracked objects:
   973 ;;		On entry : F/F
   974 ;;		On exit  : F/F
   975 ;;		Unchanged: E/0
   976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   981 ;;Total ram usage:        0 bytes
   982 ;; Hardware stack levels used:    1
   983 ;; Hardware stack levels required when called:    3
   984 ;; This function calls:
   985 ;;		Nothing
   986 ;; This function is called by:
   987 ;;		_CLASSB_ClockLineFreqTest
   988 ;; This function uses a non-reentrant model
   989 ;;
   990                           
   991                           	psect	text8
   992  000378                     __ptext8:
   993                           	opt stack 0
   994  000378                     _CLASSB_LineUserSave:
   995                           	opt stack 26
   996                           
   997                           ; BSR set to: 15
   998                           ;CLASSB_ClockLineFreqTest.c: 192: InterruptsUser = INTCON;
   999                           
  1000                           ; BSR set to: 15
  1001                           ;incstack = 0
  1002  000378  CFF2 F043          	movff	intcon,_InterruptsUser	;volatile
  1003                           
  1004                           ;CLASSB_ClockLineFreqTest.c: 193: CCPUser = CCP1CON;
  1005  00037C  CFBD F03F          	movff	4029,_CCPUser	;volatile
  1006                           
  1007                           ;CLASSB_ClockLineFreqTest.c: 194: Timer1User = T1CON;
  1008  000380  CFCD F047          	movff	4045,_Timer1User	;volatile
  1009                           
  1010                           ;CLASSB_ClockLineFreqTest.c: 195: Timer1GateUser = T1GCON;
  1011  000384  CFCC F046          	movff	4044,_Timer1GateUser	;volatile
  1012                           
  1013                           ;CLASSB_ClockLineFreqTest.c: 196: PIE1User = PIE1;
  1014  000388  CF9D F044          	movff	3997,_PIE1User	;volatile
  1015                           
  1016                           ;CLASSB_ClockLineFreqTest.c: 197: PIR1User = PIR1;
  1017  00038C  CF9E F045          	movff	3998,_PIR1User	;volatile
  1018                           
  1019                           ; BSR set to: 15
  1020  000390  0012               	return	
  1021  000392                     __end_of_CLASSB_LineUserSave:
  1022                           	opt stack 0
  1023                           tblptru	equ	0xFF8
  1024                           prodh	equ	0xFF4
  1025                           prodl	equ	0xFF3
  1026                           intcon	equ	0xFF2
  1027                           postinc0	equ	0xFEE
  1028                           wreg	equ	0xFE8
  1029                           status	equ	0xFD8
  1030                           
  1031 ;; *************** function _ISR *****************
  1032 ;; Defined at:
  1033 ;;		line 217 in file "main.c"
  1034 ;; Parameters:    Size  Location     Type
  1035 ;;		None
  1036 ;; Auto vars:     Size  Location     Type
  1037 ;;		None
  1038 ;; Return value:  Size  Location     Type
  1039 ;;		None               void
  1040 ;; Registers used:
  1041 ;;		wreg, status,2, status,0, cstack
  1042 ;; Tracked objects:
  1043 ;;		On entry : 0/0
  1044 ;;		On exit  : 0/0
  1045 ;;		Unchanged: 0/0
  1046 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1047 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1048 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1049 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1050 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1051 ;;Total ram usage:        0 bytes
  1052 ;; Hardware stack levels used:    1
  1053 ;; Hardware stack levels required when called:    2
  1054 ;; This function calls:
  1055 ;;		_CLASSB_ClockLineFreqISR
  1056 ;; This function is called by:
  1057 ;;		Interrupt level 2
  1058 ;; This function uses a non-reentrant model
  1059 ;;
  1060                           
  1061                           	psect	intcode
  1062  000008                     __pintcode:
  1063                           	opt stack 0
  1064  000008                     _ISR:
  1065                           	opt stack 26
  1066                           
  1067                           ;main.c: 219: if(ClockLineFreqTestFlag == CLASSB_TEST_INPROGRESS)
  1068                           
  1069                           ; BSR set to: 15
  1070                           ;incstack = 0
  1071  000008  5041               	movf	_ClockLineFreqTestFlag,w,c
  1072  00000A  0A03               	xorlw	3
  1073  00000C  A4D8               	btfss	status,2,c
  1074  00000E  0011               	retfie		f
  1075                           
  1076                           ;main.c: 220: {
  1077                           ;main.c: 221: LATA4 ^= 1;
  1078  000010  7889               	btg	3977,4,c	;volatile
  1079                           
  1080                           ;main.c: 222: CLASSB_ClockLineFreqISR();
  1081  000012  EC0E  F000         	call	_CLASSB_ClockLineFreqISR	;wreg free
  1082  000016  0011               	retfie		f
  1083  000018                     __end_of_ISR:
  1084                           	opt stack 0
  1085                           tblptru	equ	0xFF8
  1086                           prodh	equ	0xFF4
  1087                           prodl	equ	0xFF3
  1088                           intcon	equ	0xFF2
  1089                           postinc0	equ	0xFEE
  1090                           wreg	equ	0xFE8
  1091                           status	equ	0xFD8
  1092                           
  1093 ;; *************** function _CLASSB_ClockLineFreqISR *****************
  1094 ;; Defined at:
  1095 ;;		line 99 in file "CLASSB_ClockLineFreqTest.c"
  1096 ;; Parameters:    Size  Location     Type
  1097 ;;		None
  1098 ;; Auto vars:     Size  Location     Type
  1099 ;;		None
  1100 ;; Return value:  Size  Location     Type
  1101 ;;		None               void
  1102 ;; Registers used:
  1103 ;;		wreg, status,2, status,0, cstack
  1104 ;; Tracked objects:
  1105 ;;		On entry : 0/0
  1106 ;;		On exit  : 0/0
  1107 ;;		Unchanged: 0/0
  1108 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1109 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1110 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1111 ;;      Temps:         12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1112 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1113 ;;Total ram usage:       12 bytes
  1114 ;; Hardware stack levels used:    1
  1115 ;; Hardware stack levels required when called:    1
  1116 ;; This function calls:
  1117 ;;		_CLASSB_LineUserRestore
  1118 ;; This function is called by:
  1119 ;;		_ISR
  1120 ;; This function uses a non-reentrant model
  1121 ;;
  1122                           
  1123                           	psect	text10
  1124  00001C                     __ptext10:
  1125                           	opt stack 0
  1126  00001C                     _CLASSB_ClockLineFreqISR:
  1127                           	opt stack 26
  1128                           
  1129                           ;CLASSB_ClockLineFreqTest.c: 102: if (TMR1IF)
  1130                           
  1131                           ;incstack = 0
  1132  00001C  A09E               	btfss	3998,0,c	;volatile
  1133  00001E  D007               	goto	i2l863
  1134                           
  1135                           ;CLASSB_ClockLineFreqTest.c: 103: {
  1136                           ;CLASSB_ClockLineFreqTest.c: 104: TMR1RollOver++;
  1137  000020  2A51               	incf	_TMR1RollOver,f,c
  1138                           
  1139                           ;CLASSB_ClockLineFreqTest.c: 105: TMR1IF = 0;
  1140  000022  909E               	bcf	3998,0,c	;volatile
  1141                           
  1142                           ;CLASSB_ClockLineFreqTest.c: 106: if(TMR1RollOver > 10)
  1143  000024  0E0A               	movlw	10
  1144  000026  6451               	cpfsgt	_TMR1RollOver,c
  1145  000028  D002               	goto	i2l863
  1146                           
  1147                           ;CLASSB_ClockLineFreqTest.c: 107: {
  1148                           ;CLASSB_ClockLineFreqTest.c: 108: ClockLineFreqTestFlag = CLASSB_TEST_TIMEOUT;
  1149  00002A  0E02               	movlw	2
  1150  00002C  6E41               	movwf	_ClockLineFreqTestFlag,c
  1151  00002E                     i2l863:
  1152                           
  1153                           ;CLASSB_ClockLineFreqTest.c: 109: }
  1154                           ;CLASSB_ClockLineFreqTest.c: 110: }
  1155                           ;CLASSB_ClockLineFreqTest.c: 114: if (CCP1IF)
  1156  00002E  A49E               	btfss	3998,2,c	;volatile
  1157  000030  0012               	return	
  1158                           
  1159                           ;CLASSB_ClockLineFreqTest.c: 115: {
  1160                           ;CLASSB_ClockLineFreqTest.c: 116: TMR1 = 0;
  1161  000032  6ACE               	clrf	4046,c	;volatile
  1162  000034  6ACF               	clrf	4047,c	;volatile
  1163                           
  1164                           ;CLASSB_ClockLineFreqTest.c: 117: CCP1IF = 0;
  1165  000036  949E               	bcf	3998,2,c	;volatile
  1166                           
  1167                           ;CLASSB_ClockLineFreqTest.c: 119: if(!FIRSTCROSS)
  1168  000038  6650               	tstfsz	_FIRSTCROSS,c
  1169  00003A  D004               	goto	i2l871
  1170                           
  1171                           ;CLASSB_ClockLineFreqTest.c: 120: {
  1172                           ;CLASSB_ClockLineFreqTest.c: 121: TMR1RollOver = 0;
  1173  00003C  6A51               	clrf	_TMR1RollOver,c
  1174                           
  1175                           ;CLASSB_ClockLineFreqTest.c: 122: FIRSTCROSS = 1;
  1176  00003E  0E01               	movlw	1
  1177  000040  6E50               	movwf	_FIRSTCROSS,c
  1178                           
  1179                           ;CLASSB_ClockLineFreqTest.c: 123: }
  1180  000042  D049               	goto	i2l889
  1181  000044                     i2l871:
  1182                           
  1183                           ;CLASSB_ClockLineFreqTest.c: 124: else
  1184                           ;CLASSB_ClockLineFreqTest.c: 125: {
  1185                           ;CLASSB_ClockLineFreqTest.c: 126: captureTimer1 = (uint16_t)(CCPR1H << 8) + CCPR1L;
  1186  000044  50BF               	movf	4031,w,c	;volatile
  1187  000046  6E4F               	movwf	_captureTimer1+1,c
  1188  000048  50BE               	movf	4030,w,c	;volatile
  1189  00004A  6E4E               	movwf	_captureTimer1,c
  1190                           
  1191                           ;CLASSB_ClockLineFreqTest.c: 127: if(!lineTestEnd)
  1192  00004C  6652               	tstfsz	_lineTestEnd,c
  1193  00004E  D00D               	goto	i2l77
  1194                           
  1195                           ;CLASSB_ClockLineFreqTest.c: 128: {
  1196                           ;CLASSB_ClockLineFreqTest.c: 129: TMR1RollOver <<= 16;
  1197  000050  6A51               	clrf	_TMR1RollOver,c
  1198                           
  1199                           ;CLASSB_ClockLineFreqTest.c: 130: testCount = (captureTimer1+TMR1RollOver);
  1200  000052  5051               	movf	_TMR1RollOver,w,c
  1201  000054  244E               	addwf	_captureTimer1,w,c
  1202  000056  6E01               	movwf	??_CLASSB_ClockLineFreqISR& (0+255),c
  1203  000058  0E00               	movlw	0
  1204  00005A  204F               	addwfc	_captureTimer1+1,w,c
  1205  00005C  6E02               	movwf	(??_CLASSB_ClockLineFreqISR+1)& (0+255),c
  1206  00005E  C001  F048         	movff	??_CLASSB_ClockLineFreqISR,_testCount
  1207  000062  C002  F049         	movff	??_CLASSB_ClockLineFreqISR+1,_testCount+1
  1208  000066  6A4A               	clrf	_testCount+2,c
  1209  000068  6A4B               	clrf	_testCount+3,c
  1210  00006A                     i2l77:
  1211                           
  1212                           ;CLASSB_ClockLineFreqTest.c: 131: }
  1213                           ;CLASSB_ClockLineFreqTest.c: 132: testCount = (testCount + (captureTimer1+(0x10000 * TMR
      +                          1RollOver)))/2;
  1214  00006A  C051  F001         	movff	_TMR1RollOver,??_CLASSB_ClockLineFreqISR
  1215  00006E  6A02               	clrf	(??_CLASSB_ClockLineFreqISR+1)& (0+255),c
  1216  000070  6A03               	clrf	(??_CLASSB_ClockLineFreqISR+2)& (0+255),c
  1217  000072  6A04               	clrf	(??_CLASSB_ClockLineFreqISR+3)& (0+255),c
  1218  000074  C002  F004         	movff	??_CLASSB_ClockLineFreqISR+1,??_CLASSB_ClockLineFreqISR+3
  1219  000078  C001  F003         	movff	??_CLASSB_ClockLineFreqISR,??_CLASSB_ClockLineFreqISR+2
  1220  00007C  6A02               	clrf	??_CLASSB_ClockLineFreqISR+1,c
  1221  00007E  6A01               	clrf	??_CLASSB_ClockLineFreqISR,c
  1222  000080  504E               	movf	_captureTimer1,w,c
  1223  000082  2401               	addwf	??_CLASSB_ClockLineFreqISR,w,c
  1224  000084  6E05               	movwf	(??_CLASSB_ClockLineFreqISR+4)& (0+255),c
  1225  000086  504F               	movf	_captureTimer1+1,w,c
  1226  000088  2002               	addwfc	??_CLASSB_ClockLineFreqISR+1,w,c
  1227  00008A  6E06               	movwf	(??_CLASSB_ClockLineFreqISR+5)& (0+255),c
  1228  00008C  0E00               	movlw	0
  1229  00008E  2003               	addwfc	??_CLASSB_ClockLineFreqISR+2,w,c
  1230  000090  6E07               	movwf	(??_CLASSB_ClockLineFreqISR+6)& (0+255),c
  1231  000092  0E00               	movlw	0
  1232  000094  2004               	addwfc	??_CLASSB_ClockLineFreqISR+3,w,c
  1233  000096  6E08               	movwf	(??_CLASSB_ClockLineFreqISR+7)& (0+255),c
  1234  000098  5048               	movf	_testCount,w,c
  1235  00009A  2405               	addwf	??_CLASSB_ClockLineFreqISR+4,w,c
  1236  00009C  6E09               	movwf	(??_CLASSB_ClockLineFreqISR+8)& (0+255),c
  1237  00009E  5049               	movf	_testCount+1,w,c
  1238  0000A0  2006               	addwfc	??_CLASSB_ClockLineFreqISR+5,w,c
  1239  0000A2  6E0A               	movwf	(??_CLASSB_ClockLineFreqISR+9)& (0+255),c
  1240  0000A4  504A               	movf	_testCount+2,w,c
  1241  0000A6  2007               	addwfc	??_CLASSB_ClockLineFreqISR+6,w,c
  1242  0000A8  6E0B               	movwf	(??_CLASSB_ClockLineFreqISR+10)& (0+255),c
  1243  0000AA  504B               	movf	_testCount+3,w,c
  1244  0000AC  2008               	addwfc	??_CLASSB_ClockLineFreqISR+7,w,c
  1245  0000AE  6E0C               	movwf	(??_CLASSB_ClockLineFreqISR+11)& (0+255),c
  1246  0000B0  90D8               	bcf	status,0,c
  1247  0000B2  320C               	rrcf	??_CLASSB_ClockLineFreqISR+11,f,c
  1248  0000B4  320B               	rrcf	??_CLASSB_ClockLineFreqISR+10,f,c
  1249  0000B6  320A               	rrcf	??_CLASSB_ClockLineFreqISR+9,f,c
  1250  0000B8  3209               	rrcf	??_CLASSB_ClockLineFreqISR+8,f,c
  1251  0000BA  C009  F048         	movff	??_CLASSB_ClockLineFreqISR+8,_testCount
  1252  0000BE  C00A  F049         	movff	??_CLASSB_ClockLineFreqISR+9,_testCount+1
  1253  0000C2  C00B  F04A         	movff	??_CLASSB_ClockLineFreqISR+10,_testCount+2
  1254  0000C6  C00C  F04B         	movff	??_CLASSB_ClockLineFreqISR+11,_testCount+3
  1255                           
  1256                           ;CLASSB_ClockLineFreqTest.c: 133: CCPR1L = 0;
  1257  0000CA  6ABE               	clrf	4030,c	;volatile
  1258                           
  1259                           ;CLASSB_ClockLineFreqTest.c: 134: CCPR1H = 0;
  1260  0000CC  6ABF               	clrf	4031,c	;volatile
  1261                           
  1262                           ;CLASSB_ClockLineFreqTest.c: 135: lineTestEnd++;
  1263  0000CE  2A52               	incf	_lineTestEnd,f,c
  1264                           
  1265                           ;CLASSB_ClockLineFreqTest.c: 136: TMR1RollOver = 0;
  1266  0000D0  6A51               	clrf	_TMR1RollOver,c
  1267                           
  1268                           ;CLASSB_ClockLineFreqTest.c: 137: ClockLineFreqTestFlag = CLASSB_TEST_INPROGRESS;
  1269  0000D2  0E03               	movlw	3
  1270  0000D4  6E41               	movwf	_ClockLineFreqTestFlag,c
  1271  0000D6                     i2l889:
  1272                           
  1273                           ;CLASSB_ClockLineFreqTest.c: 138: }
  1274                           ;CLASSB_ClockLineFreqTest.c: 140: if(lineTestEnd >= CLASSB_Line_Freq)
  1275  0000D6  5040               	movf	_CLASSB_Line_Freq,w,c
  1276  0000D8  5C52               	subwf	_lineTestEnd,w,c
  1277  0000DA  A0D8               	btfss	status,0,c
  1278  0000DC  0012               	return	
  1279                           
  1280                           ;CLASSB_ClockLineFreqTest.c: 141: {
  1281                           ;CLASSB_ClockLineFreqTest.c: 142: if (testCount < (expectedCount - toleranceCount))
  1282  0000DE  503B               	movf	_toleranceCount,w,c
  1283  0000E0  5C37               	subwf	_expectedCount,w,c
  1284  0000E2  6E01               	movwf	??_CLASSB_ClockLineFreqISR& (0+255),c
  1285  0000E4  503C               	movf	_toleranceCount+1,w,c
  1286  0000E6  5838               	subwfb	_expectedCount+1,w,c
  1287  0000E8  6E02               	movwf	(??_CLASSB_ClockLineFreqISR+1)& (0+255),c
  1288  0000EA  503D               	movf	_toleranceCount+2,w,c
  1289  0000EC  5839               	subwfb	_expectedCount+2,w,c
  1290  0000EE  6E03               	movwf	(??_CLASSB_ClockLineFreqISR+2)& (0+255),c
  1291  0000F0  503E               	movf	_toleranceCount+3,w,c
  1292  0000F2  583A               	subwfb	_expectedCount+3,w,c
  1293  0000F4  6E04               	movwf	(??_CLASSB_ClockLineFreqISR+3)& (0+255),c
  1294  0000F6  5001               	movf	??_CLASSB_ClockLineFreqISR,w,c
  1295  0000F8  5C48               	subwf	_testCount,w,c
  1296  0000FA  5002               	movf	??_CLASSB_ClockLineFreqISR+1,w,c
  1297  0000FC  5849               	subwfb	_testCount+1,w,c
  1298  0000FE  5003               	movf	??_CLASSB_ClockLineFreqISR+2,w,c
  1299  000100  584A               	subwfb	_testCount+2,w,c
  1300  000102  5004               	movf	??_CLASSB_ClockLineFreqISR+3,w,c
  1301  000104  584B               	subwfb	_testCount+3,w,c
  1302  000106  E205               	bc	i2l899
  1303  000108                     i2l893:
  1304                           
  1305                           ;CLASSB_ClockLineFreqTest.c: 143: {
  1306                           ;CLASSB_ClockLineFreqTest.c: 144: CLASSB_LineUserRestore();
  1307  000108  ECC9  F001         	call	_CLASSB_LineUserRestore	;wreg free
  1308                           
  1309                           ;CLASSB_ClockLineFreqTest.c: 145: ClockLineFreqTestFlag = CLASSB_TEST_FAIL;
  1310  00010C  0E01               	movlw	1
  1311  00010E  6E41               	movwf	_ClockLineFreqTestFlag,c
  1312  000110  0C01               	retlw	1
  1313  000112                     i2l899:
  1314                           
  1315                           ;CLASSB_ClockLineFreqTest.c: 152: else if (testCount > (expectedCount + toleranceCount))
  1316  000112  503B               	movf	_toleranceCount,w,c
  1317  000114  2437               	addwf	_expectedCount,w,c
  1318  000116  6E01               	movwf	??_CLASSB_ClockLineFreqISR& (0+255),c
  1319  000118  503C               	movf	_toleranceCount+1,w,c
  1320  00011A  2038               	addwfc	_expectedCount+1,w,c
  1321  00011C  6E02               	movwf	(??_CLASSB_ClockLineFreqISR+1)& (0+255),c
  1322  00011E  503D               	movf	_toleranceCount+2,w,c
  1323  000120  2039               	addwfc	_expectedCount+2,w,c
  1324  000122  6E03               	movwf	(??_CLASSB_ClockLineFreqISR+2)& (0+255),c
  1325  000124  503E               	movf	_toleranceCount+3,w,c
  1326  000126  203A               	addwfc	_expectedCount+3,w,c
  1327  000128  6E04               	movwf	(??_CLASSB_ClockLineFreqISR+3)& (0+255),c
  1328  00012A  5048               	movf	_testCount,w,c
  1329  00012C  5C01               	subwf	??_CLASSB_ClockLineFreqISR,w,c
  1330  00012E  5049               	movf	_testCount+1,w,c
  1331  000130  5802               	subwfb	??_CLASSB_ClockLineFreqISR+1,w,c
  1332  000132  504A               	movf	_testCount+2,w,c
  1333  000134  5803               	subwfb	??_CLASSB_ClockLineFreqISR+2,w,c
  1334  000136  504B               	movf	_testCount+3,w,c
  1335  000138  5804               	subwfb	??_CLASSB_ClockLineFreqISR+3,w,c
  1336  00013A  E3E6               	bnc	i2l893
  1337                           
  1338                           ;CLASSB_ClockLineFreqTest.c: 161: else
  1339                           ;CLASSB_ClockLineFreqTest.c: 162: {
  1340                           ;CLASSB_ClockLineFreqTest.c: 163: CLASSB_LineUserRestore();
  1341  00013C  ECC9  F001         	call	_CLASSB_LineUserRestore	;wreg free
  1342                           
  1343                           ;CLASSB_ClockLineFreqTest.c: 164: ClockLineFreqTestFlag = CLASSB_TEST_PASS;
  1344  000140  6A41               	clrf	_ClockLineFreqTestFlag,c
  1345  000142  0012               	return	
  1346  000144                     __end_of_CLASSB_ClockLineFreqISR:
  1347                           	opt stack 0
  1348                           tblptru	equ	0xFF8
  1349                           prodh	equ	0xFF4
  1350                           prodl	equ	0xFF3
  1351                           intcon	equ	0xFF2
  1352                           postinc0	equ	0xFEE
  1353                           wreg	equ	0xFE8
  1354                           status	equ	0xFD8
  1355                           
  1356 ;; *************** function _CLASSB_LineUserRestore *****************
  1357 ;; Defined at:
  1358 ;;		line 200 in file "CLASSB_ClockLineFreqTest.c"
  1359 ;; Parameters:    Size  Location     Type
  1360 ;;		None
  1361 ;; Auto vars:     Size  Location     Type
  1362 ;;		None
  1363 ;; Return value:  Size  Location     Type
  1364 ;;		None               void
  1365 ;; Registers used:
  1366 ;;		None
  1367 ;; Tracked objects:
  1368 ;;		On entry : 0/0
  1369 ;;		On exit  : 0/0
  1370 ;;		Unchanged: 0/0
  1371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1372 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1373 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1374 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1375 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1376 ;;Total ram usage:        0 bytes
  1377 ;; Hardware stack levels used:    1
  1378 ;; This function calls:
  1379 ;;		Nothing
  1380 ;; This function is called by:
  1381 ;;		_CLASSB_ClockLineFreqISR
  1382 ;; This function uses a non-reentrant model
  1383 ;;
  1384                           
  1385                           	psect	text11
  1386  000392                     __ptext11:
  1387                           	opt stack 0
  1388  000392                     _CLASSB_LineUserRestore:
  1389                           	opt stack 26
  1390                           
  1391                           ;CLASSB_ClockLineFreqTest.c: 202: INTCON = InterruptsUser;
  1392                           
  1393                           ;incstack = 0
  1394  000392  C043  FFF2         	movff	_InterruptsUser,intcon	;volatile
  1395                           
  1396                           ;CLASSB_ClockLineFreqTest.c: 203: CCP1CON = CCPUser;
  1397  000396  C03F  FFBD         	movff	_CCPUser,4029	;volatile
  1398                           
  1399                           ;CLASSB_ClockLineFreqTest.c: 204: T1CON = Timer1User;
  1400  00039A  C047  FFCD         	movff	_Timer1User,4045	;volatile
  1401                           
  1402                           ;CLASSB_ClockLineFreqTest.c: 205: T1GCON = Timer1GateUser;
  1403  00039E  C046  FFCC         	movff	_Timer1GateUser,4044	;volatile
  1404                           
  1405                           ;CLASSB_ClockLineFreqTest.c: 206: PIE1 = PIE1User;
  1406  0003A2  C044  FF9D         	movff	_PIE1User,3997	;volatile
  1407                           
  1408                           ;CLASSB_ClockLineFreqTest.c: 207: PIR1 = PIR1User;
  1409  0003A6  C045  FF9E         	movff	_PIR1User,3998	;volatile
  1410  0003AA  0012               	return	
  1411  0003AC                     __end_of_CLASSB_LineUserRestore:
  1412                           	opt stack 0
  1413  0000                     tblptru	equ	0xFF8
  1414                           prodh	equ	0xFF4
  1415                           prodl	equ	0xFF3
  1416                           intcon	equ	0xFF2
  1417                           postinc0	equ	0xFEE
  1418                           wreg	equ	0xFE8
  1419                           status	equ	0xFD8
  1420                           tblptru	equ	0xFF8
  1421                           prodh	equ	0xFF4
  1422                           prodl	equ	0xFF3
  1423                           intcon	equ	0xFF2
  1424                           postinc0	equ	0xFEE
  1425                           wreg	equ	0xFE8
  1426                           status	equ	0xFD8
  1427                           
  1428                           	psect	rparam
  1429  0000                     tblptru	equ	0xFF8
  1430                           prodh	equ	0xFF4
  1431                           prodl	equ	0xFF3
  1432                           intcon	equ	0xFF2
  1433                           postinc0	equ	0xFEE
  1434                           wreg	equ	0xFE8
  1435                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         11
    Persistent  17
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     60      88
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    ClockLineFreqTestFail	PTR FTN()void  size(2) Largest target is 0
		 -> Absolute function(), 


Critical Paths under _main in COMRAM

    _main->_CLASSB_ClockLineFreqTest
    _CLASSB_ClockLineFreqTest->___lldiv
    ___lldiv->___lmul

Critical Paths under _ISR in COMRAM

    _ISR->_CLASSB_ClockLineFreqISR

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0    1117
                                             54 COMRAM     6     6      0
           _CLASSB_ClockLineFreqTest
             _CheckClockLineTestFlag
                               _Init
                       _OnClockError
 ---------------------------------------------------------------------------------
 (1) _OnClockError                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Init                                                 0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CheckClockLineTestFlag                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _CLASSB_ClockLineFreqTest                            14     8      6    1072
                                             40 COMRAM    14     8      6
                _CLASSB_LineUserSave
                       _LineFreqInit
                            ___lldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (2) ___lmul                                              15     7      8     606
                                             12 COMRAM    15     7      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     277
                                             27 COMRAM    13     5      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _LineFreqInit                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CLASSB_LineUserSave                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  0     0      0       0
            _CLASSB_ClockLineFreqISR
 ---------------------------------------------------------------------------------
 (4) _CLASSB_ClockLineFreqISR                             12    12      0       0
                                              0 COMRAM    12    12      0
             _CLASSB_LineUserRestore
 ---------------------------------------------------------------------------------
 (5) _CLASSB_LineUserRestore                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLASSB_ClockLineFreqTest
     _CLASSB_LineUserSave
     _LineFreqInit
     ___lldiv
       ___lmul (ARG)
     ___lmul
   _CheckClockLineTestFlag
   _Init
   _OnClockError

 _ISR (ROOT)
   _CLASSB_ClockLineFreqISR
     _CLASSB_LineUserRestore

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     3C      58       1       92.6%
BITBANK15           38      0       0      35        0.0%
BANK15              38      0       0      36        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      58      12        0.0%
DATA                 0      0      58       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.31 build 56723 
Symbol Table                                                                                   Mon Aug 04 13:18:41 2014

                                     u40 0162                                       u45 0158  
                           __CFG_CP0$OFF 000000                             __CFG_CP1$OFF 000000  
                           __CFG_CP2$OFF 000000                             __CFG_CP3$OFF 000000  
                            __CFG_LVP$ON 000000                                      l161 03CA  
                                    l163 03D2                                      l608 0302  
                                    l823 02B6                                      l825 02C2  
                                    l835 02F4                                      l827 02C6  
                                    l963 0330                             __CFG_CPB$OFF 000000  
                           __CFG_CPD$OFF 000000                                      _ISR 0008  
                                    wreg 000FE8                           ??_OnClockError 000D  
               ?_CLASSB_ClockLineFreqISR 0001                                     ?_ISR 0001  
                                   _LATA 000F89                                     _LATB 000F8A  
                                   _LATC 000F8B                                     _PIE1 000F9D  
                                   _PIR1 000F9E                                     i2l77 006A  
                                   _TMR1 000FCE                            ?_LineFreqInit 0001  
                                   _Init 0340                                     _main 0314  
                          __CFG_BORV$190 000000                                     prodh 000FF4  
                                   prodl 000FF3                                     start 0018  
         __end_of_CLASSB_LineUserRestore 03AC                            __CFG_IESO$OFF 000000  
               _CLASSB_ClockLineFreqTest 0144                                    ??_ISR 000D  
                                  ?_Init 0001                                    ?_main 0001  
                        __end_of___lldiv 0314                                    _T1CON 000FCD  
                                  _LATA0 007C48                                    _LATA1 007C49  
                                  _LATA2 007C4A                                    _LATA4 007C4C  
                                  i2l871 0044                                    i2l863 002E  
                                  i2l893 0108                                    i2l889 00D6  
                                  i2l899 0112                                    _TRISA 000F92  
                                  _TRISB 000F93                                    _TRISC 000F94  
                          __CFG_WRT0$OFF 000000                            __CFG_WRT1$OFF 000000  
                          __CFG_WRT2$OFF 000000                      ___lmul@multiplicand 0011  
                          __CFG_WRT3$OFF 000000                           __CFG_EBTR0$OFF 000000  
                         __CFG_FCMEN$OFF 000000                           __CFG_EBTR1$OFF 000000  
                         __CFG_EBTR2$OFF 000000                           __CFG_EBTR3$OFF 000000  
                          __CFG_WRTB$OFF 000000                            __CFG_WRTC$OFF 000000  
                          __CFG_WRTD$OFF 000000                           __CFG_EBTRB$OFF 000000  
                     __CFG_MCLRE$INTMCLR 000000                           ??_LineFreqInit 000D  
                                  status 000FD8                           __CFG_HFOFST$ON 000000  
                         __CFG_PBADEN$ON 000000              __end_of_CLASSB_LineUserSave 0392  
                        __initialization 03AC                             __end_of_Init 035C  
                         _toleranceCount 003B                             __end_of_main 0340  
                                 ??_Init 000D                                   ??_main 0037  
                         _Timer1GateUser 0046                            __activetblptr 000002  
        __end_of_CLASSB_ClockLineFreqISR 0144                                   _CCP1IE 007CEA  
                                 _CCP1IF 007CF2                                   _CCPR1H 000FBF  
                                 _CCPR1L 000FBE                                   _ANSELA 000F38  
                                 _ANSELB 000F39                                   _ANSELC 000F3A  
                                 _T1GCON 000FCC                           __CFG_WDTEN$OFF 000000  
                                 _INTCON 000FF2                                   _OSCCON 000FD3  
                                 _TMR1IE 007CE8                                   _TMR1IF 007CF0  
                                 _TMR1ON 007E68                           __CFG_XINST$OFF 000000  
                             _Timer1User 0047                 ??_CheckClockLineTestFlag 000D  
                   __end_of_OnClockError 03DA                                   ___lmul 0204  
                         __CFG_STVREN$ON 000000                                ??___lldiv 0024  
                                 clear_0 03B2                                   tblptru 000FF8  
                             __accesstop 0060                  __end_of__initialization 03B8  
                         __pcstackCOMRAM 0001                     __end_of_LineFreqInit 0378  
             ??_CLASSB_ClockLineFreqTest 002F                          __CFG_PLLCFG$OFF 000000  
                             __pnvCOMRAM 0037                       __CFG_CCP2MX$PORTC1 000000  
       __size_of_CLASSB_ClockLineFreqISR 0128          __size_of_CheckClockLineTestFlag 0014  
                                ?___lmul 000D                       __CFG_CCP3MX$PORTB5 000000  
                                _CCP1CON 000FBD                           ___lmul@product 0018  
                                _CCPUser 003F  CLASSB_ClockLineFreqTest@systemFrequency 0033  
                  __size_of_OnClockError 0004                            _expectedCount 0037  
                        __CFG_PWRTEN$OFF 000000                                  __Hparam 0000  
                                __Lparam 0000                          __size_of___lmul 009A  
                                ___lldiv 029E                                  __pcinit 03AC  
                                __ramtop 1000                                  __ptext0 0314  
                                __ptext1 03D6                                  __ptext2 0340  
                                __ptext3 03C2                                  __ptext4 0144  
                                __ptext5 0204                                  __ptext6 029E  
                                __ptext7 035C                                  __ptext8 0378  
                           __size_of_ISR 0010                   _CheckClockLineTestFlag 03C2  
                           _OnClockError 03D6                     end_of_initialization 03B8  
                          __Lmediumconst 0000                          ___lldiv@divisor 0020  
                        ___lldiv@counter 0028                    __size_of_LineFreqInit 001C  
                                postinc0 000FEE             __size_of_CLASSB_LineUserSave 001A  
                       __CFG_FOSC$INTIO7 000000                 ??_CLASSB_LineUserRestore 0001  
                        _ClockTestResult 0042                             _LineFreqInit 035C  
                _CLASSB_ClockLineFreqISR 001C                           __end_of___lmul 029E  
                    start_initialization 03AC                              __end_of_ISR 0018  
  CLASSB_ClockLineFreqTest@lineFrequency 002D                                 ??___lmul 0015  
                            __pbssCOMRAM 0048                           _InterruptsUser 0043  
                  _ClockLineFreqTestFail 004C                    _ClockLineFreqTestFlag 0041  
        __size_of_CLASSB_LineUserRestore 001A                ??_CLASSB_ClockLineFreqISR 0001  
                              __pintcode 0008        __size_of_CLASSB_ClockLineFreqTest 00C0  
                          _captureTimer1 004E                ?_CLASSB_ClockLineFreqTest 0029  
                               ?___lldiv 001C                         __CFG_PRICLKEN$ON 000000  
                ?_CheckClockLineTestFlag 0001                         _CLASSB_Line_Freq 0040  
                    _CLASSB_LineUserSave 0378                                 _PIE1User 0044  
                               _PIR1User 0045                         __CFG_WDTPS$32768 000000  
                              _testCount 0048                   _CLASSB_LineUserRestore 0392  
                   ?_CLASSB_LineUserSave 0001           __end_of_CheckClockLineTestFlag 03D6  
                      ___lmul@multiplier 000D                                 __Hrparam 0000  
                               __Lrparam 0000                       __CFG_BOREN$SBORDIS 000000  
                      __CFG_P2BMX$PORTB5 000000                              _lineTestEnd 0052  
                       __size_of___lldiv 0076                    ??_CLASSB_LineUserSave 000D  
                               __ptext10 001C                                 __ptext11 0392  
                          __size_of_Init 001C                            __size_of_main 002C  
                             _FIRSTCROSS 0050                             _TMR1RollOver 0051  
 CLASSB_ClockLineFreqTest@clockFrequency 0029                                 intlevel2 0000  
       __end_of_CLASSB_ClockLineFreqTest 0204                         ___lldiv@dividend 001C  
      CLASSB_ClockLineFreqTest@tolerance 002E                         ___lldiv@quotient 0024  
                      __CFG_T3CMX$PORTC0 000000                            ?_OnClockError 0001  
                ?_CLASSB_LineUserRestore 0001  
