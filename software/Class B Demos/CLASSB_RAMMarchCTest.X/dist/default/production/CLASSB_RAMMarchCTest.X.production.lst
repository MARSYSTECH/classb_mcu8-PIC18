

Microchip Technology PIC18 PRO Macro Assembler V1.12 build 49521 
                                                                                               Wed May 21 12:11:48 2014

HI-TECH Software Omniscient Code Generator (PRO mode) build 49521
     1                           	processor	18F87K90
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	text0,global,reloc=2,class=CODE,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text1,global,reloc=2,class=CODE,delta=1
     9                           	psect	text2,global,reloc=2,class=CODE,delta=1
    10                           	psect	text3,global,reloc=2,class=CODE,delta=1
    11                           	psect	text4,global,reloc=2,class=CODE,delta=1
    12                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    15                           	dabs	1,0x64,2
    16                           	dabs	1,0x66,2
    17                           	dabs	1,0x62,2
    18                           	dabs	1,0x68,2
    19                           	dabs	1,0x60,2
    20  0000                     
    21 ;;
    22 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
    23 ;;
    24 ;; *************** function _main *****************
    25 ;; Defined at:
    26 ;;		line 148 in file "main.c"
    27 ;; Parameters:    Size  Location     Type
    28 ;;		None
    29 ;; Auto vars:     Size  Location     Type
    30 ;;  testResult      1   13[COMRAM] volatile unsigned char 
    31 ;; Return value:  Size  Location     Type
    32 ;;		None               void
    33 ;; Registers used:
    34 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
    35 ;; Tracked objects:
    36 ;;		On entry : 0/0
    37 ;;		On exit  : 0/0
    38 ;;		Unchanged: 0/0
    39 ;; Data sizes:     COMRAM  BANK0h   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
    40 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
    41 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
    42 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
    43 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
    44 ;;Total ram usage:        1 bytes
    45 ;; Hardware stack levels required when called:    3
    46 ;; This function calls:
    47 ;;		_CLASSB_RAMMarchCTest
    48 ;; This function is called by:
    49 ;;		Startup code after reset
    50 ;; This function uses a non-reentrant model
    51 ;;
    52                           
    53                           	psect	text0
    54  01FBF8                     __ptext0:
    55                           	opt stack 0
    56  0000                     _TBLPTRL	set	4086
    57  0000                     _TBLPTRH	set	4087
    58  0000                     _PRODL	set	4083
    59  0000                     _INDF1	set	4071
    60  0000                     _FSR1	set	4065
    61  0000                     
    62                           ; #config settings
    63  01FBF8                     _main:
    64                           	opt stack 28
    65                           
    66                           ;main.c: 149: volatile uint8_t testResult = 0;
    67  01FBF8  6A0E               	clrf	main@testResult,c	;volatile
    68                           
    69                           ;main.c: 151: CLASSB_MarchstartAddress = (char*)0x60;
    70  01FBFA  0100               	movlb	0	; () banked
    71  01FBFC  6B61               	clrf	97,b
    72  01FBFE  0E60               	movlw	96
    73  01FC00  6F60               	movwf	96,b
    74                           
    75                           ;main.c: 152: CLASSB_MarchbufferAddress = (char*)0xC0;
    76  01FC02  6B63               	clrf	99,b
    77  01FC04  0EC0               	movlw	192
    78  01FC06  6F62               	movwf	98,b
    79                           
    80                           ;main.c: 153: CLASSB_MarchLength = 0x50;
    81  01FC08  6B69               	clrf	105,b
    82  01FC0A  0E50               	movlw	80
    83  01FC0C  6F68               	movwf	104,b
    84                           
    85                           ; BSR set to: 0
    86                           ;main.c: 155: testResult = CLASSB_RAMMarchCTest();
    87  01FC0E  ECD5  F0FE         	call	_CLASSB_RAMMarchCTest	;wreg free
    88  01FC12  6E0E               	movwf	main@testResult,c	;volatile
    89                           
    90                           ;main.c: 157: if (testResult == CLASSB_TEST_PASS)
    91  01FC14  660E               	tstfsz	main@testResult,c	;volatile
    92  01FC16  D000               	goto	l11
    93  01FC18                     l11:
    94  01FC18  F000               	nop		;# 
    95  01FC1A                     l13:
    96  01FC1A  D7FF               	goto	l13
    97                           
    98                           	psect	cinit
    99  01FBF2                     __pcinit:
   100                           	opt stack 0
   101  01FBF2                     start_initialization:
   102                           	opt stack 0
   103  01FBF2                     __initialization:
   104                           	opt stack 0
   105  01FBF2                     end_of_initialization:
   106                           	opt stack 0
   107  01FBF2                     __end_of__initialization:
   108                           	opt stack 0
   109  01FBF2  0100               	movlb	0
   110  01FBF4  EFFC  F0FD         	goto	_main	;jump to C main() function
   111                           
   112                           	psect	cstackCOMRAM
   113  000001                     __pcstackCOMRAM:
   114                           	opt stack 0
   115  000001                     ?_memcpy:
   116                           	opt stack 0
   117  000001                     MarchCGlobalTest@r:
   118                           	opt stack 0
   119  000001                     memcpy@d1:
   120                           	opt stack 0
   121                           
   122                           ; 2 bytes @ 0x0
   123  000001                     	ds	1
   124  000002                     MarchCGlobalTest@bitMask:
   125                           	opt stack 0
   126                           
   127                           ; 1 bytes @ 0x1
   128  000002                     	ds	1
   129  000003                     MarchCGlobalTest@i:
   130                           	opt stack 0
   131  000003                     memcpy@s1:
   132                           	opt stack 0
   133                           
   134                           ; 2 bytes @ 0x2
   135  000003                     	ds	2
   136  000005                     memcpy@n:
   137                           	opt stack 0
   138                           
   139                           ; 2 bytes @ 0x4
   140  000005                     	ds	2
   141  000007                     memcpy@d:
   142                           	opt stack 0
   143                           
   144                           ; 2 bytes @ 0x6
   145  000007                     	ds	2
   146  000009                     memcpy@s:
   147                           	opt stack 0
   148                           
   149                           ; 2 bytes @ 0x8
   150  000009                     	ds	2
   151  00000B                     ??_CLASSB_RAMMarchCTest:
   152  00000B                     
   153                           ; 0 bytes @ 0xA
   154  00000B                     	ds	2
   155  00000D                     CLASSB_RAMMarchCTest@testResult:
   156                           	opt stack 0
   157                           
   158                           ; 1 bytes @ 0xC
   159  00000D                     	ds	1
   160  00000E                     main@testResult:
   161                           	opt stack 0
   162                           
   163                           ; 1 bytes @ 0xD
   164  00000E                     	ds	1
   165                           
   166 ;; *************** function _CLASSB_RAMMarchCTest *****************
   167 ;; Defined at:
   168 ;;		line 74 in file "CLASSB_RAMMARCHCTest.c"
   169 ;; Parameters:    Size  Location     Type
   170 ;;		None
   171 ;; Auto vars:     Size  Location     Type
   172 ;;  testResult      1   12[COMRAM] volatile unsigned char 
   173 ;; Return value:  Size  Location     Type
   174 ;;                  1    wreg      enum E11556
   175 ;; Registers used:
   176 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   177 ;; Tracked objects:
   178 ;;		On entry : F/0
   179 ;;		On exit  : 0/0
   180 ;;		Unchanged: 0/0
   181 ;; Data sizes:     COMRAM  BANK0h   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   183 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   184 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   185 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   186 ;;Total ram usage:        3 bytes
   187 ;; Hardware stack levels used:    1
   188 ;; Hardware stack levels required when called:    2
   189 ;; This function calls:
   190 ;;		_memcpy
   191 ;;		_MarchCGlobalTest
   192 ;;		_MarchCFailure
   193 ;; This function is called by:
   194 ;;		_main
   195 ;; This function uses a non-reentrant model
   196 ;;
   197                           
   198                           	psect	text1
   199  01FDAA                     __ptext1:
   200                           	opt stack 0
   201  01FDAA                     __end_of_main:
   202                           	opt stack 0
   203  01FDAA                     _CLASSB_RAMMarchCTest:
   204                           	opt stack 28
   205                           
   206                           ; BSR set to: 0
   207                           ;CLASSB_RAMMARCHCTest.c: 75: volatile unsigned char testResult;
   208                           ;CLASSB_RAMMARCHCTest.c: 80: if (CLASSB_MarchbufferAddress != (0))
   209  01FDAA  5163               	movf	99,w,b
   210  01FDAC  1162               	iorwf	98,w,b
   211  01FDAE  E00E               	bz	l893
   212                           
   213                           ; BSR set to: 0
   214                           ;CLASSB_RAMMARCHCTest.c: 81: memcpy(CLASSB_MarchbufferAddress, CLASSB_MarchstartAddress,
      +                           CLASSB_MarchLength);
   215  01FDB0  C062 F001          	movff	98,?_memcpy
   216  01FDB4  C063 F002          	movff	99,?_memcpy+1
   217  01FDB8  C060 F003          	movff	96,?_memcpy+2
   218  01FDBC  C061 F004          	movff	97,?_memcpy+3
   219  01FDC0  C068 F005          	movff	104,?_memcpy+4
   220  01FDC4  C069 F006          	movff	105,?_memcpy+5
   221  01FDC8  EC21  F0FE         	call	_memcpy	;wreg free
   222  01FDCC                     l893:
   223                           
   224                           ;CLASSB_RAMMARCHCTest.c: 86: if (CLASSB_MarchstartAddress < (char*)0x6A)
   225  01FDCC  0E6A               	movlw	106
   226  01FDCE  0100               	movlb	0	; () banked
   227  01FDD0  5D60               	subwf	96,w,b
   228  01FDD2  0E00               	movlw	0
   229  01FDD4  5961               	subwfb	97,w,b
   230  01FDD6  E217               	bc	l909
   231                           
   232                           ; BSR set to: 0
   233                           ;CLASSB_RAMMARCHCTest.c: 87: {
   234                           ;CLASSB_RAMMARCHCTest.c: 88: testResult = MarchCGlobalTest();
   235  01FDD8  EC41  F0FE         	call	_MarchCGlobalTest	;wreg free
   236  01FDDC  6E0D               	movwf	CLASSB_RAMMarchCTest@testResult,c	;volatile
   237                           
   238                           ;CLASSB_RAMMARCHCTest.c: 89: if (testResult)
   239  01FDDE  500D               	movf	CLASSB_RAMMarchCTest@testResult,w,c	;volatile
   240  01FDE0  E003               	bz	l905
   241                           
   242                           ;CLASSB_RAMMARCHCTest.c: 90: {
   243                           ;CLASSB_RAMMARCHCTest.c: 91: MarchCFailure();
   244  01FDE2  EC0E  F0FE         	call	_MarchCFailure	;wreg free
   245  01FDE6                     l901:
   246                           
   247                           ;CLASSB_RAMMARCHCTest.c: 92: return CLASSB_TEST_FAIL;
   248  01FDE6  0C01               	retlw	1
   249  01FDE8                     l905:
   250                           
   251                           ;CLASSB_RAMMARCHCTest.c: 93: }
   252                           ;CLASSB_RAMMARCHCTest.c: 94: CLASSB_MarchLength -= (0x6B - (char)CLASSB_MarchstartAddres
      +                          s);
   253  01FDE8  0E6B               	movlw	107
   254  01FDEA  6E0B               	movwf	??_CLASSB_RAMMarchCTest& (0+255),c
   255  01FDEC  6A0C               	clrf	(??_CLASSB_RAMMarchCTest+1)& (0+255),c
   256  01FDEE  0100               	movlb	0	; () banked
   257  01FDF0  5160               	movf	96,w,b
   258  01FDF2  5E0B               	subwf	??_CLASSB_RAMMarchCTest,f,c
   259  01FDF4  0E00               	movlw	0
   260  01FDF6  5A0C               	subwfb	??_CLASSB_RAMMarchCTest+1,f,c
   261  01FDF8  500B               	movf	??_CLASSB_RAMMarchCTest,w,c
   262  01FDFA  5F68               	subwf	104,f,b
   263  01FDFC  500C               	movf	??_CLASSB_RAMMarchCTest+1,w,c
   264  01FDFE  5B69               	subwfb	105,f,b
   265                           
   266                           ; BSR set to: 0
   267                           ;CLASSB_RAMMARCHCTest.c: 95: CLASSB_MarchstartAddress = (char*)0x6A;
   268  01FE00  6B61               	clrf	97,b
   269  01FE02  0E6A               	movlw	106
   270  01FE04  6F60               	movwf	96,b
   271  01FE06                     l909:
   272                           
   273                           ; BSR set to: 0
   274                           ;CLASSB_RAMMARCHCTest.c: 96: }
   275                           ;CLASSB_RAMMARCHCTest.c: 101: CLASSB_MARCHtempAddress = CLASSB_MarchstartAddress;
   276  01FE06  C060 F064          	movff	96,100
   277  01FE0A  C061 F065          	movff	97,101
   278                           
   279                           ; BSR set to: 0
   280                           ;CLASSB_RAMMARCHCTest.c: 102: for (CLASSB_MarchIndex=0; CLASSB_MarchIndex<CLASSB_MarchLe
      +                          ngth; CLASSB_MarchIndex++)
   281  01FE0E  6B66               	clrf	102,b
   282  01FE10  6B67               	clrf	103,b
   283  01FE12  D009               	goto	l919
   284  01FE14                     l913:
   285                           
   286                           ; BSR set to: 0
   287                           ;CLASSB_RAMMARCHCTest.c: 103: {
   288                           ;CLASSB_RAMMARCHCTest.c: 104: *CLASSB_MarchstartAddress=0x00;
   289  01FE14  C060 FFD9          	movff	96,fsr2l
   290  01FE18  C061 FFDA          	movff	97,fsr2h
   291  01FE1C  6ADF               	clrf	indf2,c
   292                           
   293                           ; BSR set to: 0
   294                           ;CLASSB_RAMMARCHCTest.c: 105: CLASSB_MarchstartAddress++;
   295  01FE1E  4B60               	infsnz	96,f,b
   296  01FE20  2B61               	incf	97,f,b
   297                           
   298                           ; BSR set to: 0
   299  01FE22  4B66               	infsnz	102,f,b
   300  01FE24  2B67               	incf	103,f,b
   301  01FE26                     l919:
   302                           
   303                           ; BSR set to: 0
   304  01FE26  5168               	movf	104,w,b
   305  01FE28  5D66               	subwf	102,w,b
   306  01FE2A  5169               	movf	105,w,b
   307  01FE2C  5967               	subwfb	103,w,b
   308  01FE2E  E3F2               	bnc	l913
   309                           
   310                           ; BSR set to: 0
   311                           ;CLASSB_RAMMARCHCTest.c: 106: }
   312                           ;CLASSB_RAMMARCHCTest.c: 111: CLASSB_MarchstartAddress = CLASSB_MARCHtempAddress;
   313  01FE30  C064 F060          	movff	100,96
   314  01FE34  C065 F061          	movff	101,97
   315                           
   316                           ;CLASSB_RAMMARCHCTest.c: 112: for (CLASSB_MarchIndex=0; CLASSB_MarchIndex<CLASSB_MarchLe
      +                          ngth; CLASSB_MarchIndex++)
   317  01FE38  6B66               	clrf	102,b
   318  01FE3A  6B67               	clrf	103,b
   319  01FE3C  D01D               	goto	l937
   320  01FE3E                     l53:
   321                           
   322                           ; BSR set to: 0
   323                           ;CLASSB_RAMMARCHCTest.c: 113: {
   324                           ;CLASSB_RAMMARCHCTest.c: 114: PRODL = 0x00;
   325  01FE3E  6AF3               	clrf	prodl,c	;volatile
   326                           
   327                           ;CLASSB_RAMMARCHCTest.c: 115: for(TBLPTRL = 0; TBLPTRL < 8; TBLPTRL++)
   328  01FE40  6AF6               	clrf	tblptrl,c	;volatile
   329  01FE42                     l921:
   330  01FE42  0E07               	movlw	7
   331  01FE44  64F6               	cpfsgt	tblptrl,c	;volatile
   332  01FE46  D001               	goto	l54
   333  01FE48  D012               	goto	l935
   334  01FE4A                     l54:
   335  01FE4A  C060 FFE1          	movff	96,fsr1l	;# 
   336  01FE4E  C061 FFE2          	movff	97,fsr1h	;# 
   337  01FE52  50E7               	movf	indf1,w,c	;# 
   338  01FE54  18F3               	xorwf	prodl,w,c	;# 
   339  01FE56  0E01               	movlw	1	;# 
   340  01FE58  A4D8               	btfss	status,2,c	;# 
   341  01FE5A  6EF7               	movwf	tblptrh,c	;# 
   342  01FE5C  50E7               	movf	indf1,w,c	;# 
   343  01FE5E  80D8               	bsf	status,0,c	;# 
   344  01FE60  36F3               	rlcf	prodl,f,c	;# 
   345  01FE62  10F3               	iorwf	prodl,w,c	;# 
   346  01FE64  6EE7               	movwf	indf1,c	;# 
   347                           
   348                           ;CLASSB_RAMMARCHCTest.c: 135: if (TBLPTRH)
   349  01FE66  50F7               	movf	tblptrh,w,c	;volatile
   350  01FE68  E1BE               	bnz	l901
   351  01FE6A  2AF6               	incf	tblptrl,f,c	;volatile
   352  01FE6C  D7EA               	goto	l921
   353  01FE6E                     l935:
   354                           
   355                           ;CLASSB_RAMMARCHCTest.c: 137: }
   356                           ;CLASSB_RAMMARCHCTest.c: 138: CLASSB_MarchstartAddress++;
   357  01FE6E  0100               	movlb	0	; () banked
   358  01FE70  4B60               	infsnz	96,f,b
   359  01FE72  2B61               	incf	97,f,b
   360  01FE74  4B66               	infsnz	102,f,b
   361  01FE76  2B67               	incf	103,f,b
   362  01FE78                     l937:
   363                           
   364                           ; BSR set to: 0
   365  01FE78  5168               	movf	104,w,b
   366  01FE7A  5D66               	subwf	102,w,b
   367  01FE7C  5169               	movf	105,w,b
   368  01FE7E  5967               	subwfb	103,w,b
   369  01FE80  E3DE               	bnc	l53
   370                           
   371                           ; BSR set to: 0
   372                           ;CLASSB_RAMMARCHCTest.c: 139: }
   373                           ;CLASSB_RAMMARCHCTest.c: 144: CLASSB_MarchstartAddress = CLASSB_MARCHtempAddress;
   374  01FE82  C064 F060          	movff	100,96
   375  01FE86  C065 F061          	movff	101,97
   376                           
   377                           ;CLASSB_RAMMARCHCTest.c: 145: for (CLASSB_MarchIndex=0; CLASSB_MarchIndex<CLASSB_MarchLe
      +                          ngth; CLASSB_MarchIndex++)
   378  01FE8A  6B66               	clrf	102,b
   379  01FE8C  6B67               	clrf	103,b
   380  01FE8E  D01D               	goto	l955
   381  01FE90                     l59:
   382                           
   383                           ; BSR set to: 0
   384                           ;CLASSB_RAMMARCHCTest.c: 146: {
   385                           ;CLASSB_RAMMARCHCTest.c: 147: PRODL = 0xFF;
   386  01FE90  68F3               	setf	prodl,c	;volatile
   387                           
   388                           ;CLASSB_RAMMARCHCTest.c: 148: for(TBLPTRL = 0; TBLPTRL < 8; TBLPTRL++)
   389  01FE92  6AF6               	clrf	tblptrl,c	;volatile
   390  01FE94                     l939:
   391  01FE94  0E07               	movlw	7
   392  01FE96  64F6               	cpfsgt	tblptrl,c	;volatile
   393  01FE98  D001               	goto	l60
   394  01FE9A  D012               	goto	l953
   395  01FE9C                     l60:
   396  01FE9C  C060 FFE1          	movff	96,fsr1l	;# 
   397  01FEA0  C061 FFE2          	movff	97,fsr1h	;# 
   398  01FEA4  50E7               	movf	indf1,w,c	;# 
   399  01FEA6  18F3               	xorwf	prodl,w,c	;# 
   400  01FEA8  0E01               	movlw	1	;# 
   401  01FEAA  A4D8               	btfss	status,2,c	;# 
   402  01FEAC  6EF7               	movwf	tblptrh,c	;# 
   403  01FEAE  50E7               	movf	indf1,w,c	;# 
   404  01FEB0  90D8               	bcf	status,0,c	;# 
   405  01FEB2  36F3               	rlcf	prodl,f,c	;# 
   406  01FEB4  14F3               	andwf	prodl,w,c	;# 
   407  01FEB6  6EE7               	movwf	indf1,c	;# 
   408                           
   409                           ;CLASSB_RAMMARCHCTest.c: 168: if (TBLPTRH)
   410  01FEB8  50F7               	movf	tblptrh,w,c	;volatile
   411  01FEBA  E195               	bnz	l901
   412  01FEBC  2AF6               	incf	tblptrl,f,c	;volatile
   413  01FEBE  D7EA               	goto	l939
   414  01FEC0                     l953:
   415                           
   416                           ;CLASSB_RAMMARCHCTest.c: 170: }
   417                           ;CLASSB_RAMMARCHCTest.c: 171: CLASSB_MarchstartAddress++;
   418  01FEC0  0100               	movlb	0	; () banked
   419  01FEC2  4B60               	infsnz	96,f,b
   420  01FEC4  2B61               	incf	97,f,b
   421  01FEC6  4B66               	infsnz	102,f,b
   422  01FEC8  2B67               	incf	103,f,b
   423  01FECA                     l955:
   424                           
   425                           ; BSR set to: 0
   426  01FECA  5168               	movf	104,w,b
   427  01FECC  5D66               	subwf	102,w,b
   428  01FECE  5169               	movf	105,w,b
   429  01FED0  5967               	subwfb	103,w,b
   430  01FED2  E3DE               	bnc	l59
   431                           
   432                           ; BSR set to: 0
   433                           ;CLASSB_RAMMARCHCTest.c: 173: }
   434                           ;CLASSB_RAMMARCHCTest.c: 211: CLASSB_MarchstartAddress--;
   435  01FED4  0760               	decf	96,f,b
   436  01FED6  A0D8               	btfss	status,0,c
   437  01FED8  0761               	decf	97,f,b
   438                           
   439                           ; BSR set to: 0
   440                           ;CLASSB_RAMMARCHCTest.c: 212: CLASSB_MARCHtempAddress = CLASSB_MarchstartAddress;
   441  01FEDA  C060 F064          	movff	96,100
   442  01FEDE  C061 F065          	movff	97,101
   443                           
   444                           ; BSR set to: 0
   445                           ;CLASSB_RAMMARCHCTest.c: 213: for (CLASSB_MarchIndex=CLASSB_MarchLength; CLASSB_MarchInd
      +                          ex>0; CLASSB_MarchIndex--)
   446  01FEE2  C068 F066          	movff	104,102
   447  01FEE6  C069 F067          	movff	105,103
   448  01FEEA  D020               	goto	l979
   449  01FEEC                     l65:
   450                           
   451                           ; BSR set to: 0
   452                           ;CLASSB_RAMMARCHCTest.c: 214: {
   453                           ;CLASSB_RAMMARCHCTest.c: 216: PRODL = 0x00;
   454  01FEEC  6AF3               	clrf	prodl,c	;volatile
   455                           
   456                           ;CLASSB_RAMMARCHCTest.c: 217: for(TBLPTRL = 0; TBLPTRL < 8; TBLPTRL++)
   457  01FEEE  6AF6               	clrf	tblptrl,c	;volatile
   458  01FEF0                     l963:
   459  01FEF0  0E07               	movlw	7
   460  01FEF2  64F6               	cpfsgt	tblptrl,c	;volatile
   461  01FEF4  D001               	goto	l66
   462  01FEF6  D013               	goto	l977
   463  01FEF8                     l66:
   464  01FEF8  C060 FFE1          	movff	96,fsr1l	;# 
   465  01FEFC  C061 FFE2          	movff	97,fsr1h	;# 
   466  01FF00  50E7               	movf	indf1,w,c	;# 
   467  01FF02  18F3               	xorwf	prodl,w,c	;# 
   468  01FF04  0E01               	movlw	1	;# 
   469  01FF06  A4D8               	btfss	status,2,c	;# 
   470  01FF08  6EF7               	movwf	tblptrh,c	;# 
   471  01FF0A  50E7               	movf	indf1,w,c	;# 
   472  01FF0C  80D8               	bsf	status,0,c	;# 
   473  01FF0E  32F3               	rrcf	prodl,f,c	;# 
   474  01FF10  10F3               	iorwf	prodl,w,c	;# 
   475  01FF12  6EE7               	movwf	indf1,c	;# 
   476                           
   477                           ;CLASSB_RAMMARCHCTest.c: 236: if (TBLPTRH)
   478  01FF14  50F7               	movf	tblptrh,w,c	;volatile
   479  01FF16  E001 D766          	bnz	l901
   480  01FF1A  2AF6               	incf	tblptrl,f,c	;volatile
   481  01FF1C  D7E9               	goto	l963
   482  01FF1E                     l977:
   483                           
   484                           ;CLASSB_RAMMARCHCTest.c: 238: }
   485                           ;CLASSB_RAMMARCHCTest.c: 239: CLASSB_MarchstartAddress--;
   486  01FF1E  0100               	movlb	0	; () banked
   487  01FF20  0760               	decf	96,f,b
   488  01FF22  A0D8               	btfss	status,0,c
   489  01FF24  0761               	decf	97,f,b
   490  01FF26  0766               	decf	102,f,b
   491  01FF28  A0D8               	btfss	status,0,c
   492  01FF2A  0767               	decf	103,f,b
   493  01FF2C                     l979:
   494                           
   495                           ; BSR set to: 0
   496  01FF2C  5167               	movf	103,w,b
   497  01FF2E  1166               	iorwf	102,w,b
   498  01FF30  E1DD               	bnz	l65
   499                           
   500                           ; BSR set to: 0
   501                           ;CLASSB_RAMMARCHCTest.c: 240: }
   502                           ;CLASSB_RAMMARCHCTest.c: 245: CLASSB_MarchstartAddress = CLASSB_MARCHtempAddress;
   503  01FF32  C064 F060          	movff	100,96
   504  01FF36  C065 F061          	movff	101,97
   505                           
   506                           ;CLASSB_RAMMARCHCTest.c: 246: for (CLASSB_MarchIndex=CLASSB_MarchLength; CLASSB_MarchInd
      +                          ex>0; CLASSB_MarchIndex--)
   507  01FF3A  C068 F066          	movff	104,102
   508  01FF3E  C069 F067          	movff	105,103
   509  01FF42  D020               	goto	l997
   510  01FF44                     l71:
   511                           
   512                           ; BSR set to: 0
   513                           ;CLASSB_RAMMARCHCTest.c: 247: {
   514                           ;CLASSB_RAMMARCHCTest.c: 249: PRODL = 0xFF;
   515  01FF44  68F3               	setf	prodl,c	;volatile
   516                           
   517                           ;CLASSB_RAMMARCHCTest.c: 250: for(TBLPTRL = 0; TBLPTRL < 8; TBLPTRL++)
   518  01FF46  6AF6               	clrf	tblptrl,c	;volatile
   519  01FF48                     l981:
   520  01FF48  0E07               	movlw	7
   521  01FF4A  64F6               	cpfsgt	tblptrl,c	;volatile
   522  01FF4C  D001               	goto	l72
   523  01FF4E  D013               	goto	l995
   524  01FF50                     l72:
   525  01FF50  C060 FFE1          	movff	96,fsr1l	;# 
   526  01FF54  C061 FFE2          	movff	97,fsr1h	;# 
   527  01FF58  50E7               	movf	indf1,w,c	;# 
   528  01FF5A  18F3               	xorwf	prodl,w,c	;# 
   529  01FF5C  0E01               	movlw	1	;# 
   530  01FF5E  A4D8               	btfss	status,2,c	;# 
   531  01FF60  6EF7               	movwf	tblptrh,c	;# 
   532  01FF62  50E7               	movf	indf1,w,c	;# 
   533  01FF64  90D8               	bcf	status,0,c	;# 
   534  01FF66  32F3               	rrcf	prodl,f,c	;# 
   535  01FF68  14F3               	andwf	prodl,w,c	;# 
   536  01FF6A  6EE7               	movwf	indf1,c	;# 
   537                           
   538                           ;CLASSB_RAMMARCHCTest.c: 269: if (TBLPTRH)
   539  01FF6C  50F7               	movf	tblptrh,w,c	;volatile
   540  01FF6E  E001 D73A          	bnz	l901
   541  01FF72  2AF6               	incf	tblptrl,f,c	;volatile
   542  01FF74  D7E9               	goto	l981
   543  01FF76                     l995:
   544                           
   545                           ;CLASSB_RAMMARCHCTest.c: 271: }
   546                           ;CLASSB_RAMMARCHCTest.c: 272: CLASSB_MarchstartAddress--;
   547  01FF76  0100               	movlb	0	; () banked
   548  01FF78  0760               	decf	96,f,b
   549  01FF7A  A0D8               	btfss	status,0,c
   550  01FF7C  0761               	decf	97,f,b
   551  01FF7E  0766               	decf	102,f,b
   552  01FF80  A0D8               	btfss	status,0,c
   553  01FF82  0767               	decf	103,f,b
   554  01FF84                     l997:
   555                           
   556                           ; BSR set to: 0
   557  01FF84  5167               	movf	103,w,b
   558  01FF86  1166               	iorwf	102,w,b
   559  01FF88  E1DD               	bnz	l71
   560                           
   561                           ; BSR set to: 0
   562                           ;CLASSB_RAMMARCHCTest.c: 273: }
   563                           ;CLASSB_RAMMARCHCTest.c: 278: CLASSB_MarchstartAddress = CLASSB_MARCHtempAddress;
   564  01FF8A  C064 F060          	movff	100,96
   565  01FF8E  C065 F061          	movff	101,97
   566                           
   567                           ;CLASSB_RAMMARCHCTest.c: 279: for (CLASSB_MarchIndex = CLASSB_MarchLength; CLASSB_MarchI
      +                          ndex > 0; CLASSB_MarchIndex--)
   568  01FF92  C068 F066          	movff	104,102
   569  01FF96  C069 F067          	movff	105,103
   570  01FF9A  D01B               	goto	l1015
   571  01FF9C                     l77:
   572                           
   573                           ; BSR set to: 0
   574                           ;CLASSB_RAMMARCHCTest.c: 280: {
   575                           ;CLASSB_RAMMARCHCTest.c: 282: PRODL = 0x00;
   576  01FF9C  6AF3               	clrf	prodl,c	;volatile
   577                           
   578                           ;CLASSB_RAMMARCHCTest.c: 283: for(TBLPTRL = 0; TBLPTRL < 8; TBLPTRL++)
   579  01FF9E  6AF6               	clrf	tblptrl,c	;volatile
   580  01FFA0                     l999:
   581  01FFA0  0E07               	movlw	7
   582  01FFA2  64F6               	cpfsgt	tblptrl,c	;volatile
   583  01FFA4  D001               	goto	l78
   584  01FFA6  D00E               	goto	l1013
   585  01FFA8                     l78:
   586  01FFA8  C060 FFE1          	movff	96,fsr1l	;# 
   587  01FFAC  C061 FFE2          	movff	97,fsr1h	;# 
   588  01FFB0  50E7               	movf	indf1,w,c	;# 
   589  01FFB2  18F3               	xorwf	prodl,w,c	;# 
   590  01FFB4  0E01               	movlw	1	;# 
   591  01FFB6  A4D8               	btfss	status,2,c	;# 
   592  01FFB8  6EF7               	movwf	tblptrh,c	;# 
   593                           
   594                           ;CLASSB_RAMMARCHCTest.c: 296: if (TBLPTRH)
   595  01FFBA  50F7               	movf	tblptrh,w,c	;volatile
   596  01FFBC  E001 D713          	bnz	l901
   597  01FFC0  2AF6               	incf	tblptrl,f,c	;volatile
   598  01FFC2  D7EE               	goto	l999
   599  01FFC4                     l1013:
   600                           
   601                           ;CLASSB_RAMMARCHCTest.c: 298: }
   602                           ;CLASSB_RAMMARCHCTest.c: 299: CLASSB_MarchstartAddress--;
   603  01FFC4  0100               	movlb	0	; () banked
   604  01FFC6  0760               	decf	96,f,b
   605  01FFC8  A0D8               	btfss	status,0,c
   606  01FFCA  0761               	decf	97,f,b
   607  01FFCC  0766               	decf	102,f,b
   608  01FFCE  A0D8               	btfss	status,0,c
   609  01FFD0  0767               	decf	103,f,b
   610  01FFD2                     l1015:
   611                           
   612                           ; BSR set to: 0
   613  01FFD2  5167               	movf	103,w,b
   614  01FFD4  1166               	iorwf	102,w,b
   615  01FFD6  E1E2               	bnz	l77
   616                           
   617                           ; BSR set to: 0
   618                           ;CLASSB_RAMMARCHCTest.c: 300: }
   619                           ;CLASSB_RAMMARCHCTest.c: 305: CLASSB_MarchstartAddress++;
   620  01FFD8  4B60               	infsnz	96,f,b
   621  01FFDA  2B61               	incf	97,f,b
   622                           
   623                           ; BSR set to: 0
   624                           ;CLASSB_RAMMARCHCTest.c: 306: if (CLASSB_MarchbufferAddress != (0))
   625  01FFDC  5163               	movf	99,w,b
   626  01FFDE  1162               	iorwf	98,w,b
   627  01FFE0  E00E               	bz	l1023
   628                           
   629                           ; BSR set to: 0
   630                           ;CLASSB_RAMMARCHCTest.c: 307: memcpy(CLASSB_MarchstartAddress, CLASSB_MarchbufferAddress
      +                          , CLASSB_MarchLength);
   631  01FFE2  C060 F001          	movff	96,?_memcpy
   632  01FFE6  C061 F002          	movff	97,?_memcpy+1
   633  01FFEA  C062 F003          	movff	98,?_memcpy+2
   634  01FFEE  C063 F004          	movff	99,?_memcpy+3
   635  01FFF2  C068 F005          	movff	104,?_memcpy+4
   636  01FFF6  C069 F006          	movff	105,?_memcpy+5
   637  01FFFA  EC21  F0FE         	call	_memcpy	;wreg free
   638  01FFFE                     l1023:
   639                           
   640                           ;CLASSB_RAMMARCHCTest.c: 309: return CLASSB_TEST_PASS;
   641  01FFFE  0C00               	retlw	0
   642  020000                     __end_of_CLASSB_RAMMarchCTest:
   643                           	opt stack 0
   644                           tblptrh	equ	0xFF7
   645                           tblptrl	equ	0xFF6
   646                           prodl	equ	0xFF3
   647                           indf1	equ	0xFE7
   648                           fsr1h	equ	0xFE2
   649                           fsr1l	equ	0xFE1
   650                           indf2	equ	0xFDF
   651                           fsr2h	equ	0xFDA
   652                           fsr2l	equ	0xFD9
   653                           status	equ	0xFD8
   654                           
   655 ;; *************** function _MarchCGlobalTest *****************
   656 ;; Defined at:
   657 ;;		line 331 in file "CLASSB_RAMMARCHCTest.c"
   658 ;; Parameters:    Size  Location     Type
   659 ;;		None
   660 ;; Auto vars:     Size  Location     Type
   661 ;;  i               1    2[COMRAM] unsigned char 
   662 ;;  bitMask         1    1[COMRAM] unsigned char 
   663 ;;  r               1    0[COMRAM] unsigned char 
   664 ;; Return value:  Size  Location     Type
   665 ;;                  1    wreg      enum E11556
   666 ;; Registers used:
   667 ;;		wreg, status,2, status,0
   668 ;; Tracked objects:
   669 ;;		On entry : F/0
   670 ;;		On exit  : 0/0
   671 ;;		Unchanged: 0/0
   672 ;; Data sizes:     COMRAM  BANK0h   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
   673 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   674 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   676 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
   677 ;;Total ram usage:        3 bytes
   678 ;; Hardware stack levels used:    1
   679 ;; This function calls:
   680 ;;		Nothing
   681 ;; This function is called by:
   682 ;;		_CLASSB_RAMMarchCTest
   683 ;; This function uses a non-reentrant model
   684 ;;
   685                           
   686                           	psect	text2
   687  01FC82                     __ptext2:
   688                           	opt stack 0
   689  01FC82                     _MarchCGlobalTest:
   690                           	opt stack 29
   691                           
   692                           ; BSR set to: 0
   693  01FC82  5160               	movf	96,w,b	;# 
   694  01FC84  6EF3               	movwf	prodl,c	;# 
   695  01FC86  5161               	movf	97,w,b	;# 
   696  01FC88  6EF4               	movwf	prodh,c	;# 
   697  01FC8A  5162               	movf	98,w,b	;# 
   698  01FC8C  6EF6               	movwf	tblptrl,c	;# 
   699  01FC8E  5163               	movf	99,w,b	;# 
   700  01FC90  6EF7               	movwf	tblptrh,c	;# 
   701  01FC92  5168               	movf	104,w,b	;# 
   702  01FC94  6EE9               	movwf	fsr0l,c	;# 
   703  01FC96  5169               	movf	105,w,b	;# 
   704  01FC98  6EEA               	movwf	fsr0h,c	;# 
   705                           
   706                           ;CLASSB_RAMMARCHCTest.c: 348: uint8_t i;
   707                           ;CLASSB_RAMMARCHCTest.c: 349: uint8_t r;
   708                           ;CLASSB_RAMMARCHCTest.c: 350: uint8_t bitMask;
   709                           ;CLASSB_RAMMARCHCTest.c: 354: FSR1 = 0x60;
   710  01FC9A  6AE2               	clrf	fsr1h,c	;volatile
   711  01FC9C  0E60               	movlw	96
   712  01FC9E  6EE1               	movwf	fsr1l,c	;volatile
   713                           
   714                           ;CLASSB_RAMMARCHCTest.c: 356: for(i = 0; i < 10; i++)
   715  01FCA0  6A03               	clrf	MarchCGlobalTest@i,c
   716  01FCA2                     l89:
   717                           
   718                           ;CLASSB_RAMMARCHCTest.c: 357: {
   719                           ;CLASSB_RAMMARCHCTest.c: 358: INDF1 = 0;
   720  01FCA2  6AE7               	clrf	indf1,c	;volatile
   721                           
   722                           ;CLASSB_RAMMARCHCTest.c: 359: FSR1++;
   723  01FCA4  4AE1               	infsnz	fsr1l,f,c	;volatile
   724  01FCA6  2AE2               	incf	fsr1h,f,c	;volatile
   725  01FCA8  2A03               	incf	MarchCGlobalTest@i,f,c
   726  01FCAA  0E09               	movlw	9
   727  01FCAC  6403               	cpfsgt	MarchCGlobalTest@i,c
   728  01FCAE  D7F9               	goto	l89
   729                           
   730                           ;CLASSB_RAMMARCHCTest.c: 360: }
   731                           ;CLASSB_RAMMARCHCTest.c: 364: FSR1 = 0x60;
   732  01FCB0  6AE2               	clrf	fsr1h,c	;volatile
   733  01FCB2  0E60               	movlw	96
   734  01FCB4  6EE1               	movwf	fsr1l,c	;volatile
   735                           
   736                           ;CLASSB_RAMMARCHCTest.c: 365: for(i = 0; i < 10; i++)
   737  01FCB6  6A03               	clrf	MarchCGlobalTest@i,c
   738  01FCB8                     l743:
   739                           
   740                           ;CLASSB_RAMMARCHCTest.c: 366: {
   741                           ;CLASSB_RAMMARCHCTest.c: 367: bitMask = 0x01;
   742  01FCB8  0E01               	movlw	1
   743  01FCBA  6E02               	movwf	MarchCGlobalTest@bitMask,c
   744                           
   745                           ;CLASSB_RAMMARCHCTest.c: 368: for(r = 0; r < 8; r++)
   746  01FCBC  6A01               	clrf	MarchCGlobalTest@r,c
   747  01FCBE                     l751:
   748                           
   749                           ;CLASSB_RAMMARCHCTest.c: 369: {
   750                           ;CLASSB_RAMMARCHCTest.c: 370: if(INDF1 & bitMask)
   751  01FCBE  50E7               	movf	indf1,w,c	;volatile
   752  01FCC0  1402               	andwf	MarchCGlobalTest@bitMask,w,c
   753  01FCC2  E001               	bz	l759
   754  01FCC4                     l753:
   755                           
   756                           ;CLASSB_RAMMARCHCTest.c: 371: {
   757                           ;CLASSB_RAMMARCHCTest.c: 372: return CLASSB_TEST_FAIL;
   758  01FCC4  0C01               	retlw	1
   759  01FCC6                     l759:
   760                           
   761                           ;CLASSB_RAMMARCHCTest.c: 374: else
   762                           ;CLASSB_RAMMARCHCTest.c: 375: {
   763                           ;CLASSB_RAMMARCHCTest.c: 376: INDF1 |= bitMask;
   764  01FCC6  5002               	movf	MarchCGlobalTest@bitMask,w,c
   765  01FCC8  12E7               	iorwf	indf1,f,c	;volatile
   766                           
   767                           ;CLASSB_RAMMARCHCTest.c: 377: }
   768                           ;CLASSB_RAMMARCHCTest.c: 378: bitMask <<= 1;
   769  01FCCA  90D8               	bcf	status,0,c
   770  01FCCC  3602               	rlcf	MarchCGlobalTest@bitMask,f,c
   771  01FCCE  2A01               	incf	MarchCGlobalTest@r,f,c
   772  01FCD0  0E07               	movlw	7
   773  01FCD2  6401               	cpfsgt	MarchCGlobalTest@r,c
   774  01FCD4  D7F4               	goto	l751
   775                           
   776                           ;CLASSB_RAMMARCHCTest.c: 379: }
   777                           ;CLASSB_RAMMARCHCTest.c: 380: FSR1++;
   778  01FCD6  4AE1               	infsnz	fsr1l,f,c	;volatile
   779  01FCD8  2AE2               	incf	fsr1h,f,c	;volatile
   780  01FCDA  2A03               	incf	MarchCGlobalTest@i,f,c
   781  01FCDC  0E09               	movlw	9
   782  01FCDE  6403               	cpfsgt	MarchCGlobalTest@i,c
   783  01FCE0  D7EB               	goto	l743
   784                           
   785                           ;CLASSB_RAMMARCHCTest.c: 381: }
   786                           ;CLASSB_RAMMARCHCTest.c: 384: FSR1 = 0x60;
   787  01FCE2  6AE2               	clrf	fsr1h,c	;volatile
   788  01FCE4  0E60               	movlw	96
   789  01FCE6  6EE1               	movwf	fsr1l,c	;volatile
   790                           
   791                           ;CLASSB_RAMMARCHCTest.c: 385: for(i = 0; i < 10; i++)
   792  01FCE8  6A03               	clrf	MarchCGlobalTest@i,c
   793  01FCEA                     l775:
   794                           
   795                           ;CLASSB_RAMMARCHCTest.c: 386: {
   796                           ;CLASSB_RAMMARCHCTest.c: 387: bitMask = 0x01;
   797  01FCEA  0E01               	movlw	1
   798  01FCEC  6E02               	movwf	MarchCGlobalTest@bitMask,c
   799                           
   800                           ;CLASSB_RAMMARCHCTest.c: 388: for(r = 0; r < 8; r++)
   801  01FCEE  6A01               	clrf	MarchCGlobalTest@r,c
   802  01FCF0                     l783:
   803                           
   804                           ;CLASSB_RAMMARCHCTest.c: 389: {
   805                           ;CLASSB_RAMMARCHCTest.c: 390: if(INDF1 & bitMask)
   806  01FCF0  50E7               	movf	indf1,w,c	;volatile
   807  01FCF2  1402               	andwf	MarchCGlobalTest@bitMask,w,c
   808  01FCF4  E0E7               	bz	l753
   809                           
   810                           ;CLASSB_RAMMARCHCTest.c: 391: {
   811                           ;CLASSB_RAMMARCHCTest.c: 392: INDF1 &= ~bitMask;
   812  01FCF6  1C02               	comf	MarchCGlobalTest@bitMask,w,c
   813  01FCF8  16E7               	andwf	indf1,f,c	;volatile
   814                           
   815                           ;CLASSB_RAMMARCHCTest.c: 397: }
   816                           ;CLASSB_RAMMARCHCTest.c: 398: bitMask <<= 1;
   817                           
   818                           ;CLASSB_RAMMARCHCTest.c: 393: }
   819  01FCFA  90D8               	bcf	status,0,c
   820  01FCFC  3602               	rlcf	MarchCGlobalTest@bitMask,f,c
   821  01FCFE  2A01               	incf	MarchCGlobalTest@r,f,c
   822  01FD00  0E07               	movlw	7
   823  01FD02  6401               	cpfsgt	MarchCGlobalTest@r,c
   824  01FD04  D7F5               	goto	l783
   825                           
   826                           ;CLASSB_RAMMARCHCTest.c: 399: }
   827                           ;CLASSB_RAMMARCHCTest.c: 400: FSR1++;
   828  01FD06  4AE1               	infsnz	fsr1l,f,c	;volatile
   829  01FD08  2AE2               	incf	fsr1h,f,c	;volatile
   830  01FD0A  2A03               	incf	MarchCGlobalTest@i,f,c
   831  01FD0C  0E09               	movlw	9
   832  01FD0E  6403               	cpfsgt	MarchCGlobalTest@i,c
   833  01FD10  D7EC               	goto	l775
   834                           
   835                           ;CLASSB_RAMMARCHCTest.c: 401: }
   836                           ;CLASSB_RAMMARCHCTest.c: 416: FSR1 = 0x69;
   837  01FD12  6AE2               	clrf	fsr1h,c	;volatile
   838  01FD14  0E69               	movlw	105
   839  01FD16  6EE1               	movwf	fsr1l,c	;volatile
   840                           
   841                           ;CLASSB_RAMMARCHCTest.c: 417: for(i = 0; i < 10; i++)
   842  01FD18  6A03               	clrf	MarchCGlobalTest@i,c
   843  01FD1A                     l807:
   844                           
   845                           ;CLASSB_RAMMARCHCTest.c: 418: {
   846                           ;CLASSB_RAMMARCHCTest.c: 420: bitMask = 0x80;
   847  01FD1A  0E80               	movlw	128
   848  01FD1C  6E02               	movwf	MarchCGlobalTest@bitMask,c
   849                           
   850                           ;CLASSB_RAMMARCHCTest.c: 421: for(r = 0; r < 8; r++)
   851  01FD1E  6A01               	clrf	MarchCGlobalTest@r,c
   852  01FD20                     l815:
   853                           
   854                           ;CLASSB_RAMMARCHCTest.c: 422: {
   855                           ;CLASSB_RAMMARCHCTest.c: 423: if(INDF1 & bitMask)
   856  01FD20  50E7               	movf	indf1,w,c	;volatile
   857  01FD22  1402               	andwf	MarchCGlobalTest@bitMask,w,c
   858  01FD24  E1CF               	bnz	l753
   859                           
   860                           ;CLASSB_RAMMARCHCTest.c: 427: else
   861                           ;CLASSB_RAMMARCHCTest.c: 428: {
   862                           ;CLASSB_RAMMARCHCTest.c: 429: INDF1 |= bitMask;
   863  01FD26  5002               	movf	MarchCGlobalTest@bitMask,w,c
   864  01FD28  12E7               	iorwf	indf1,f,c	;volatile
   865                           
   866                           ;CLASSB_RAMMARCHCTest.c: 430: }
   867                           ;CLASSB_RAMMARCHCTest.c: 431: bitMask >>= 1;
   868  01FD2A  90D8               	bcf	status,0,c
   869  01FD2C  3202               	rrcf	MarchCGlobalTest@bitMask,f,c
   870  01FD2E  2A01               	incf	MarchCGlobalTest@r,f,c
   871  01FD30  0E07               	movlw	7
   872  01FD32  6401               	cpfsgt	MarchCGlobalTest@r,c
   873  01FD34  D7F5               	goto	l815
   874                           
   875                           ;CLASSB_RAMMARCHCTest.c: 432: }
   876                           ;CLASSB_RAMMARCHCTest.c: 433: FSR1--;
   877  01FD36  06E1               	decf	fsr1l,f,c	;volatile
   878  01FD38  A0D8               	btfss	status,0,c
   879  01FD3A  06E2               	decf	fsr1h,f,c	;volatile
   880  01FD3C  2A03               	incf	MarchCGlobalTest@i,f,c
   881  01FD3E  0E09               	movlw	9
   882  01FD40  6403               	cpfsgt	MarchCGlobalTest@i,c
   883  01FD42  D7EB               	goto	l807
   884                           
   885                           ;CLASSB_RAMMARCHCTest.c: 434: }
   886                           ;CLASSB_RAMMARCHCTest.c: 437: FSR1 = 0x69;
   887  01FD44  6AE2               	clrf	fsr1h,c	;volatile
   888  01FD46  0E69               	movlw	105
   889  01FD48  6EE1               	movwf	fsr1l,c	;volatile
   890                           
   891                           ;CLASSB_RAMMARCHCTest.c: 438: for(i = 0; i < 10; i++)
   892  01FD4A  6A03               	clrf	MarchCGlobalTest@i,c
   893  01FD4C                     l839:
   894                           
   895                           ;CLASSB_RAMMARCHCTest.c: 439: {
   896                           ;CLASSB_RAMMARCHCTest.c: 440: bitMask = 0x80;
   897  01FD4C  0E80               	movlw	128
   898  01FD4E  6E02               	movwf	MarchCGlobalTest@bitMask,c
   899                           
   900                           ;CLASSB_RAMMARCHCTest.c: 441: for(r = 0; r < 8; r++)
   901  01FD50  6A01               	clrf	MarchCGlobalTest@r,c
   902  01FD52                     l847:
   903                           
   904                           ;CLASSB_RAMMARCHCTest.c: 442: {
   905                           ;CLASSB_RAMMARCHCTest.c: 443: if(INDF1 & bitMask)
   906  01FD52  50E7               	movf	indf1,w,c	;volatile
   907  01FD54  1402               	andwf	MarchCGlobalTest@bitMask,w,c
   908  01FD56  E0B6               	bz	l753
   909                           
   910                           ;CLASSB_RAMMARCHCTest.c: 444: {
   911                           ;CLASSB_RAMMARCHCTest.c: 445: INDF1 &= ~bitMask;
   912  01FD58  1C02               	comf	MarchCGlobalTest@bitMask,w,c
   913  01FD5A  16E7               	andwf	indf1,f,c	;volatile
   914                           
   915                           ;CLASSB_RAMMARCHCTest.c: 450: }
   916                           ;CLASSB_RAMMARCHCTest.c: 451: bitMask >>= 1;
   917                           
   918                           ;CLASSB_RAMMARCHCTest.c: 446: }
   919  01FD5C  90D8               	bcf	status,0,c
   920  01FD5E  3202               	rrcf	MarchCGlobalTest@bitMask,f,c
   921  01FD60  2A01               	incf	MarchCGlobalTest@r,f,c
   922  01FD62  0E07               	movlw	7
   923  01FD64  6401               	cpfsgt	MarchCGlobalTest@r,c
   924  01FD66  D7F5               	goto	l847
   925                           
   926                           ;CLASSB_RAMMARCHCTest.c: 452: }
   927                           ;CLASSB_RAMMARCHCTest.c: 453: FSR1--;
   928  01FD68  06E1               	decf	fsr1l,f,c	;volatile
   929  01FD6A  A0D8               	btfss	status,0,c
   930  01FD6C  06E2               	decf	fsr1h,f,c	;volatile
   931  01FD6E  2A03               	incf	MarchCGlobalTest@i,f,c
   932  01FD70  0E09               	movlw	9
   933  01FD72  6403               	cpfsgt	MarchCGlobalTest@i,c
   934  01FD74  D7EB               	goto	l839
   935                           
   936                           ;CLASSB_RAMMARCHCTest.c: 454: }
   937                           ;CLASSB_RAMMARCHCTest.c: 457: FSR1 = 0x69;
   938  01FD76  6AE2               	clrf	fsr1h,c	;volatile
   939  01FD78  0E69               	movlw	105
   940  01FD7A  6EE1               	movwf	fsr1l,c	;volatile
   941                           
   942                           ;CLASSB_RAMMARCHCTest.c: 458: for(i = 0; i < 10; i++)
   943  01FD7C  6A03               	clrf	MarchCGlobalTest@i,c
   944  01FD7E                     l871:
   945                           
   946                           ;CLASSB_RAMMARCHCTest.c: 459: {
   947                           ;CLASSB_RAMMARCHCTest.c: 460: if (INDF1 != 0)
   948  01FD7E  50E7               	movf	indf1,w,c	;volatile
   949  01FD80  E1A1               	bnz	l753
   950                           
   951                           ;CLASSB_RAMMARCHCTest.c: 463: }
   952                           ;CLASSB_RAMMARCHCTest.c: 464: FSR1--;
   953  01FD82  06E1               	decf	fsr1l,f,c	;volatile
   954  01FD84  A0D8               	btfss	status,0,c
   955  01FD86  06E2               	decf	fsr1h,f,c	;volatile
   956  01FD88  2A03               	incf	MarchCGlobalTest@i,f,c
   957  01FD8A  0E09               	movlw	9
   958  01FD8C  6403               	cpfsgt	MarchCGlobalTest@i,c
   959  01FD8E  D7F7               	goto	l871
   960  01FD90  CFEA F069          	movff	fsr0h,105	;# 
   961  01FD94  CFE9 F068          	movff	fsr0l,104	;# 
   962  01FD98  CFF7 F063          	movff	tblptrh,99	;# 
   963  01FD9C  CFF6 F062          	movff	tblptrl,98	;# 
   964  01FDA0  CFF4 F061          	movff	prodh,97	;# 
   965  01FDA4  CFF3 F060          	movff	prodl,96	;# 
   966                           
   967                           ;CLASSB_RAMMARCHCTest.c: 476: return CLASSB_TEST_PASS;
   968  01FDA8  0C00               	retlw	0
   969  01FDAA                     __end_of_MarchCGlobalTest:
   970                           	opt stack 0
   971                           tblptrh	equ	0xFF7
   972                           tblptrl	equ	0xFF6
   973                           prodh	equ	0xFF4
   974                           prodl	equ	0xFF3
   975                           fsr0h	equ	0xFEA
   976                           fsr0l	equ	0xFE9
   977                           indf1	equ	0xFE7
   978                           fsr1h	equ	0xFE2
   979                           fsr1l	equ	0xFE1
   980                           indf2	equ	0xFDF
   981                           fsr2h	equ	0xFDA
   982                           fsr2l	equ	0xFD9
   983                           status	equ	0xFD8
   984                           
   985 ;; *************** function _MarchCFailure *****************
   986 ;; Defined at:
   987 ;;		line 320 in file "CLASSB_RAMMARCHCTest.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;		None               void
   994 ;; Registers used:
   995 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: FFFFFFF0/0
  1000 ;; Data sizes:     COMRAM  BANK0h   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1001 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; Hardware stack levels required when called:    1
  1008 ;; This function calls:
  1009 ;;		_memcpy
  1010 ;; This function is called by:
  1011 ;;		_CLASSB_RAMMarchCTest
  1012 ;; This function uses a non-reentrant model
  1013 ;;
  1014                           
  1015                           	psect	text3
  1016  01FC1C                     __ptext3:
  1017                           	opt stack 0
  1018  01FC1C                     _MarchCFailure:
  1019                           	opt stack 28
  1020                           
  1021                           ;CLASSB_RAMMARCHCTest.c: 321: if (CLASSB_MarchbufferAddress != (0))
  1022  01FC1C  0100               	movlb	0	; () banked
  1023  01FC1E  5163               	movf	99,w,b
  1024  01FC20  1162               	iorwf	98,w,b
  1025  01FC22  B4D8               	btfsc	status,2,c
  1026  01FC24  0012               	return	
  1027                           
  1028                           ; BSR set to: 0
  1029                           ;CLASSB_RAMMARCHCTest.c: 322: memcpy(CLASSB_MARCHtempAddress, CLASSB_MarchbufferAddress,
      +                           CLASSB_MarchLength);
  1030  01FC26  C064 F001          	movff	100,?_memcpy
  1031  01FC2A  C065 F002          	movff	101,?_memcpy+1
  1032  01FC2E  C062 F003          	movff	98,?_memcpy+2
  1033  01FC32  C063 F004          	movff	99,?_memcpy+3
  1034  01FC36  C068 F005          	movff	104,?_memcpy+4
  1035  01FC3A  C069 F006          	movff	105,?_memcpy+5
  1036  01FC3E  EF21  F0FE         	goto	_memcpy	;wreg free
  1037  01FC42                     __end_of_MarchCFailure:
  1038                           	opt stack 0
  1039                           tblptrh	equ	0xFF7
  1040                           tblptrl	equ	0xFF6
  1041                           prodh	equ	0xFF4
  1042                           prodl	equ	0xFF3
  1043                           fsr0h	equ	0xFEA
  1044                           fsr0l	equ	0xFE9
  1045                           indf1	equ	0xFE7
  1046                           fsr1h	equ	0xFE2
  1047                           fsr1l	equ	0xFE1
  1048                           indf2	equ	0xFDF
  1049                           fsr2h	equ	0xFDA
  1050                           fsr2l	equ	0xFD9
  1051                           status	equ	0xFD8
  1052                           
  1053 ;; *************** function _memcpy *****************
  1054 ;; Defined at:
  1055 ;;		line 13 in file "C:\Program Files (x86)\Microchip\xc8\v1.12\sources\memcpy.c"
  1056 ;; Parameters:    Size  Location     Type
  1057 ;;  d1              2    0[COMRAM] PTR void 
  1058 ;;		 -> RAM(3827), 
  1059 ;;  s1              2    2[COMRAM] PTR const void 
  1060 ;;		 -> RAM(3827), 
  1061 ;;  n               2    4[COMRAM] unsigned int 
  1062 ;; Auto vars:     Size  Location     Type
  1063 ;;  s               2    8[COMRAM] PTR const unsigned char 
  1064 ;;		 -> RAM(3827), 
  1065 ;;  d               2    6[COMRAM] PTR unsigned char 
  1066 ;;		 -> RAM(3827), 
  1067 ;; Return value:  Size  Location     Type
  1068 ;;                  2    wreg      PTR void 
  1069 ;; Registers used:
  1070 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  1071 ;; Tracked objects:
  1072 ;;		On entry : F/0
  1073 ;;		On exit  : 0/0
  1074 ;;		Unchanged: FFFFFFF0/0
  1075 ;; Data sizes:     COMRAM  BANK0h   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14
  1076 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1077 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1079 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0
  1080 ;;Total ram usage:       10 bytes
  1081 ;; Hardware stack levels used:    1
  1082 ;; This function calls:
  1083 ;;		Nothing
  1084 ;; This function is called by:
  1085 ;;		_CLASSB_RAMMarchCTest
  1086 ;;		_MarchCFailure
  1087 ;; This function uses a non-reentrant model
  1088 ;;
  1089                           
  1090                           	psect	text4
  1091  01FC42                     __ptext4:
  1092                           	opt stack 0
  1093  01FC42                     _memcpy:
  1094                           	opt stack 28
  1095                           
  1096                           ; BSR set to: 0
  1097  01FC42  C003  F009         	movff	memcpy@s1,memcpy@s
  1098  01FC46  C004  F00A         	movff	memcpy@s1+1,memcpy@s+1
  1099  01FC4A  C001  F007         	movff	memcpy@d1,memcpy@d
  1100  01FC4E  C002  F008         	movff	memcpy@d1+1,memcpy@d+1
  1101  01FC52  D00E               	goto	l719
  1102  01FC54                     l713:
  1103  01FC54  C009  FFD9         	movff	memcpy@s,fsr2l
  1104  01FC58  C00A  FFDA         	movff	memcpy@s+1,fsr2h
  1105  01FC5C  C007  FFE1         	movff	memcpy@d,fsr1l
  1106  01FC60  C008  FFE2         	movff	memcpy@d+1,fsr1h
  1107  01FC64  CFDF FFE7          	movff	indf2,indf1
  1108  01FC68  4A09               	infsnz	memcpy@s,f,c
  1109  01FC6A  2A0A               	incf	memcpy@s+1,f,c
  1110  01FC6C  4A07               	infsnz	memcpy@d,f,c
  1111  01FC6E  2A08               	incf	memcpy@d+1,f,c
  1112  01FC70                     l719:
  1113  01FC70  0605               	decf	memcpy@n,f,c
  1114  01FC72  A0D8               	btfss	status,0,c
  1115  01FC74  0606               	decf	memcpy@n+1,f,c
  1116  01FC76  2805               	incf	memcpy@n& (0+255),w,c
  1117  01FC78  B4D8               	btfsc	status,2,c
  1118  01FC7A  2806               	incf	(memcpy@n+1)& (0+255),w,c
  1119  01FC7C  B4D8               	btfsc	status,2,c
  1120  01FC7E  0012               	return	
  1121  01FC80  D7E9               	goto	l713
  1122  01FC82                     __end_of_memcpy:
  1123                           	opt stack 0
  1124  0000                     tblptrh	equ	0xFF7
  1125                           tblptrl	equ	0xFF6
  1126                           prodh	equ	0xFF4
  1127                           prodl	equ	0xFF3
  1128                           fsr0h	equ	0xFEA
  1129                           fsr0l	equ	0xFE9
  1130                           indf1	equ	0xFE7
  1131                           fsr1h	equ	0xFE2
  1132                           fsr1l	equ	0xFE1
  1133                           indf2	equ	0xFDF
  1134                           fsr2h	equ	0xFDA
  1135                           fsr2l	equ	0xFD9
  1136                           status	equ	0xFD8
  1137                           tblptrh	equ	0xFF7
  1138                           tblptrl	equ	0xFF6
  1139                           prodh	equ	0xFF4
  1140                           prodl	equ	0xFF3
  1141                           fsr0h	equ	0xFEA
  1142                           fsr0l	equ	0xFE9
  1143                           indf1	equ	0xFE7
  1144                           fsr1h	equ	0xFE2
  1145                           fsr1l	equ	0xFE1
  1146                           indf2	equ	0xFDF
  1147                           fsr2h	equ	0xFDA
  1148                           fsr2l	equ	0xFD9
  1149                           status	equ	0xFD8
  1150                           
  1151                           	psect	text5
  1152  000000                     __ptext5:
  1153                           	opt stack 0
  1154                           tblptrh	equ	0xFF7
  1155                           tblptrl	equ	0xFF6
  1156                           prodh	equ	0xFF4
  1157                           prodl	equ	0xFF3
  1158                           fsr0h	equ	0xFEA
  1159                           fsr0l	equ	0xFE9
  1160                           indf1	equ	0xFE7
  1161                           fsr1h	equ	0xFE2
  1162                           fsr1l	equ	0xFE1
  1163                           indf2	equ	0xFDF
  1164                           fsr2h	equ	0xFDA
  1165                           fsr2l	equ	0xFD9
  1166                           status	equ	0xFD8
  1167                           
  1168                           	psect	rparam
  1169  0000                     tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           prodh	equ	0xFF4
  1172                           prodl	equ	0xFF3
  1173                           fsr0h	equ	0xFEA
  1174                           fsr0l	equ	0xFE9
  1175                           indf1	equ	0xFE7
  1176                           fsr1h	equ	0xFE2
  1177                           fsr1l	equ	0xFE1
  1178                           indf2	equ	0xFDF
  1179                           fsr2h	equ	0xFDA
  1180                           fsr2l	equ	0xFD9
  1181                           status	equ	0xFD8


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     14      14
    BANK0h          150      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          244      0       0

Pointer List with Targets:

    ?_memcpy	PTR void  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    memcpy@d1	PTR void  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    memcpy@d	PTR unsigned char  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    memcpy@s1	PTR const void  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    memcpy@s	PTR const unsigned char  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    CLASSB_MARCHtempAddress	PTR unsigned char  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    sp__memcpy	PTR void  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    CLASSB_MarchbufferAddress	PTR unsigned char  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 

    CLASSB_MarchstartAddress	PTR unsigned char  size(2) Largest target is 3827
		 -> RAM(DATA[3827]), 


Critical Paths under _main in COMRAM

    _main->_CLASSB_RAMMarchCTest
    _CLASSB_RAMMarchCTest->_memcpy
    _MarchCFailure->_memcpy

Critical Paths under _main in BANK0h

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     610
                                             13 COMRAM     1     1      0
               _CLASSB_RAMMarchCTest
 ---------------------------------------------------------------------------------
 (1) _CLASSB_RAMMarchCTest                                 3     3      0     595
                                             10 COMRAM     3     3      0
                             _memcpy
                   _MarchCGlobalTest
                      _MarchCFailure
 ---------------------------------------------------------------------------------
 (2) _MarchCGlobalTest                                     3     3      0     420
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _MarchCFailure                                        0     0      0      80
                             _memcpy
 ---------------------------------------------------------------------------------
 (3) _memcpy                                              10     4      6      80
                                              0 COMRAM    10     4      6
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _CLASSB_RAMMarchCTest
     _memcpy
     _MarchCGlobalTest
     _MarchCFailure
       _memcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           5F      0       0       0        0.0%
EEDATA             400      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              5F      E       E       1       14.7%
STACK                0      0       3       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0h           96      0       0       4        0.0%
BANK0h              96      0       0       5        0.0%
ABS                  0      0       0       6        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK14           F4      0       0      33        0.0%
BANK14              F4      0       0      34        0.0%
BIGRAMhh           E8A      0       0      35        0.0%
BIGRAMl             5F      0       0      36        0.0%
BITSFR_2             0      0       0      40        0.0%
SFR_2                0      0       0      40        0.0%
BITSFR_1             0      0       0      40        0.0%
SFR_1                0      0       0      40        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.12 build 49521 
Symbol Table                                                                                   Wed May 21 12:11:48 2014

                            l11 FC18                              l13 FC1A                              l60 FE9C  
                            l53 FE3E                              l54 FE4A                              l71 FF44  
                            l72 FF50                              l65 FEEC                              l66 FEF8  
                            l59 FE90                              l77 FF9C                              l78 FFA8  
                            l89 FCA2                     __CFG_BORV$3 000000                    __CFG_CP0$OFF 000000  
                  __CFG_CP1$OFF 000000                    __CFG_CP2$OFF 000000                    __CFG_CP3$OFF 000000  
                  __CFG_CP4$OFF 000000                    __CFG_CP5$OFF 000000                    __CFG_CP6$OFF 000000  
                  __CFG_CP7$OFF 000000                             l713 FC54                             l901 FDE6  
                           l719 FC70                             l815 FD20                             l807 FD1A  
                           l751 FCBE                             l743 FCB8                             l753 FCC4  
                           l921 FE42                             l913 FE14                             l905 FDE8  
                           l909 FE06                             l871 FD7E                             l847 FD52  
                           l839 FD4C                             l783 FCF0                             l775 FCEA  
                           l759 FCC6                             l935 FE6E                             l919 FE26  
                           l953 FEC0                             l937 FE78                             l963 FEF0  
                           l939 FE94                             l955 FECA                             l981 FF48  
                           l893 FDCC                             l977 FF1E                             l995 FF76  
                           l979 FF2C                             l997 FF84                             l999 FFA0  
                  __CFG_CPB$OFF 000000                    __CFG_CPD$OFF 000000                            INDF1 000FE7  
                          FSR0H 000FEA                            FSR1H 000FE2                            FSR0L 000FE9  
                          FSR1L 000FE1                            PRODH 000FF4                            l1013 FFC4  
                          l1023 FFFE                            l1015 FFD2                            PRODL 000FF3  
      _CLASSB_MarchstartAddress 000060  CLASSB_RAMMarchCTest@testResult 000D                            _FSR1 000FE1  
                          _main FBF8                            fsr1h 000FE2                            fsr2h 000FDA  
                          indf1 000FE7                            fsr1l 000FE1                            indf2 000FDF  
                          fsr2l 000FD9                            start 0000                   __CFG_IESO$OFF 000000  
                 __CFG_MCLRE$ON 000000                   __CFG_RETEN$ON 000000                 ??_MarchCFailure 000B  
                         STATUS 000FD8                           ?_main 0001                           _INDF1 000FE7  
                         _PRODL 000FF3                   __CFG_WRT0$OFF 000000                   __CFG_WRT1$OFF 000000  
                 __CFG_WRT2$OFF 000000                   __CFG_WRT3$OFF 000000                   __CFG_WRT4$OFF 000000  
                __CFG_EBRT0$OFF 000000                   __CFG_WRT5$OFF 000000                  __CFG_EBRT1$OFF 000000  
                 __CFG_WRT6$OFF 000000                  __CFG_EBRT2$OFF 000000                   __CFG_WRT7$OFF 000000  
                __CFG_EBRT3$OFF 000000                  __CFG_EBRT4$OFF 000000                  __CFG_FCMEN$OFF 000000  
                __CFG_EBRT5$OFF 000000                  __CFG_EBRT6$OFF 000000                  __CFG_EBRT7$OFF 000000  
                 __CFG_WRTB$OFF 000000                   __CFG_WRTC$OFF 000000                   __CFG_WRTD$OFF 000000  
                __CFG_EBRTB$OFF 000000               MarchCGlobalTest@i 0003               MarchCGlobalTest@r 0001  
                         status 000FD8                 __initialization FBF2                    __end_of_main FDAA  
                        ??_main 000E                   __activetblptr 000000                          TBLPTRH 000FF7  
                        TBLPTRL 000FF6                 __CFG_BBSIZ$BB2K 000000                  __CFG_WDTEN$OFF 000000  
                __CFG_XINST$OFF 000000                _MarchCGlobalTest FC82                  __CFG_STVREN$ON 000000  
                        _memcpy FC42                      __accesstop 0060         __end_of__initialization FBF2  
                __pcstackCOMRAM 0001   __size_of_CLASSB_RAMMarchCTest 0256                 __CFG_PLLCFG$OFF 000000  
                       ?_memcpy 0001                         _TBLPTRH 000FF7                         _TBLPTRL 000FF6  
       MarchCGlobalTest@bitMask 0002                 __CFG_PWRTEN$OFF 000000                         __Hparam 0000  
                       __Lparam 0000               _CLASSB_MarchIndex 000066                         __pcinit FBF2  
               __size_of_memcpy 0040                         __ramtop 0F00                         __ptext0 FBF8  
                       __ptext1 FDAA                         __ptext2 FC82                         __ptext3 FC1C  
                       __ptext4 FC42                         __ptext5 0000           __end_of_MarchCFailure FC42  
             __CFG_MSSPMSK$MSK7 000000        __end_of_MarchCGlobalTest FDAA            end_of_initialization FBF2  
                       memcpy@d 0007                         memcpy@n 0005                         memcpy@s 0009  
                main@testResult 000E                __CFG_FOSC$INTIO2 000000               __CFG_SOSCSEL$HIGH 000000  
     _CLASSB_MarchbufferAddress 000062                  __end_of_memcpy FC82             start_initialization FBF2  
  __end_of_CLASSB_RAMMarchCTest 0000                        ??_memcpy 0007               __CFG_CCP2MX$PORTC 000000  
       _CLASSB_MARCHtempAddress 000064               ?_MarchCGlobalTest 0001              ??_MarchCGlobalTest 0001  
             __CFG_ECCPMX$PORTE 000000            _CLASSB_RAMMarchCTest FDAA          __size_of_MarchCFailure 0026  
                      __Hrparam 0000                        __Lrparam 0000              __CFG_BOREN$SBORDIS 000000  
            _CLASSB_MarchLength 000068           ?_CLASSB_RAMMarchCTest 0001                   __size_of_main 01B2  
           __CFG_RTCOSC$SOSCREF 000000             __CFG_INTOSCSEL$HIGH 000000                   _MarchCFailure FC1C  
                      memcpy@d1 0001                        memcpy@s1 0003              __CFG_WDTPS$1048576 000000  
        ??_CLASSB_RAMMarchCTest 000B                  ?_MarchCFailure 0001             __CFG_BORPWR$ZPBORMV 000000  
     __size_of_MarchCGlobalTest 0128  
